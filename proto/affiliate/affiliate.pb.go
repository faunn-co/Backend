// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: affiliate.proto

package affiliate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalErrorCode int32

const (
	GlobalErrorCode_SUCCESS                    GlobalErrorCode = 0
	GlobalErrorCode_ERROR_FAIL                 GlobalErrorCode = 1000
	GlobalErrorCode_ERROR_JSON_BIND            GlobalErrorCode = 1001
	GlobalErrorCode_ERROR_INVALID_PARAMS       GlobalErrorCode = 1002
	GlobalErrorCode_ERROR_DATABASE             GlobalErrorCode = 1003
	GlobalErrorCode_ERROR_JSON_UNMARSHAL       GlobalErrorCode = 1004
	GlobalErrorCode_ERROR_REDIS                GlobalErrorCode = 1005
	GlobalErrorCode_ERROR_USER_NOT_FOUND       GlobalErrorCode = 1006
	GlobalErrorCode_ERROR_USER_NAME_EXISTS     GlobalErrorCode = 1007
	GlobalErrorCode_ERROR_USER_EMAIL_EXISTS    GlobalErrorCode = 1008
	GlobalErrorCode_ERROR_ENTITY_NAME_EXISTS   GlobalErrorCode = 1009
	GlobalErrorCode_ERROR_REFERRAL_CODE_EXISTS GlobalErrorCode = 1010
	GlobalErrorCode_ERROR_LOGIN_FAIL           GlobalErrorCode = 1011
	GlobalErrorCode_ERROR_NOT_AUTHORISED       GlobalErrorCode = 1012
	GlobalErrorCode_ERROR_NO_ACCESS            GlobalErrorCode = 1013
	GlobalErrorCode_ERROR_LOGOUT_FAIL          GlobalErrorCode = 1014
	GlobalErrorCode_ERROR_TOKEN_ERROR          GlobalErrorCode = 1015
	GlobalErrorCode_ERROR_CACHE_MISS           GlobalErrorCode = 1016
)

// Enum value maps for GlobalErrorCode.
var (
	GlobalErrorCode_name = map[int32]string{
		0:    "SUCCESS",
		1000: "ERROR_FAIL",
		1001: "ERROR_JSON_BIND",
		1002: "ERROR_INVALID_PARAMS",
		1003: "ERROR_DATABASE",
		1004: "ERROR_JSON_UNMARSHAL",
		1005: "ERROR_REDIS",
		1006: "ERROR_USER_NOT_FOUND",
		1007: "ERROR_USER_NAME_EXISTS",
		1008: "ERROR_USER_EMAIL_EXISTS",
		1009: "ERROR_ENTITY_NAME_EXISTS",
		1010: "ERROR_REFERRAL_CODE_EXISTS",
		1011: "ERROR_LOGIN_FAIL",
		1012: "ERROR_NOT_AUTHORISED",
		1013: "ERROR_NO_ACCESS",
		1014: "ERROR_LOGOUT_FAIL",
		1015: "ERROR_TOKEN_ERROR",
		1016: "ERROR_CACHE_MISS",
	}
	GlobalErrorCode_value = map[string]int32{
		"SUCCESS":                    0,
		"ERROR_FAIL":                 1000,
		"ERROR_JSON_BIND":            1001,
		"ERROR_INVALID_PARAMS":       1002,
		"ERROR_DATABASE":             1003,
		"ERROR_JSON_UNMARSHAL":       1004,
		"ERROR_REDIS":                1005,
		"ERROR_USER_NOT_FOUND":       1006,
		"ERROR_USER_NAME_EXISTS":     1007,
		"ERROR_USER_EMAIL_EXISTS":    1008,
		"ERROR_ENTITY_NAME_EXISTS":   1009,
		"ERROR_REFERRAL_CODE_EXISTS": 1010,
		"ERROR_LOGIN_FAIL":           1011,
		"ERROR_NOT_AUTHORISED":       1012,
		"ERROR_NO_ACCESS":            1013,
		"ERROR_LOGOUT_FAIL":          1014,
		"ERROR_TOKEN_ERROR":          1015,
		"ERROR_CACHE_MISS":           1016,
	}
)

func (x GlobalErrorCode) Enum() *GlobalErrorCode {
	p := new(GlobalErrorCode)
	*p = x
	return p
}

func (x GlobalErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[0].Descriptor()
}

func (GlobalErrorCode) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[0]
}

func (x GlobalErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GlobalErrorCode.Descriptor instead.
func (GlobalErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{0}
}

type UserRole int32

const (
	UserRole_ROLE_AFFILIATE UserRole = 0
	UserRole_ROLE_ADMIN     UserRole = 1
	UserRole_ROLE_DEV       UserRole = 2
)

// Enum value maps for UserRole.
var (
	UserRole_name = map[int32]string{
		0: "ROLE_AFFILIATE",
		1: "ROLE_ADMIN",
		2: "ROLE_DEV",
	}
	UserRole_value = map[string]int32{
		"ROLE_AFFILIATE": 0,
		"ROLE_ADMIN":     1,
		"ROLE_DEV":       2,
	}
)

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}

func (x UserRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserRole) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[1].Descriptor()
}

func (UserRole) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[1]
}

func (x UserRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserRole.Descriptor instead.
func (UserRole) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{1}
}

type AffiliateType int32

const (
	AffiliateType_AFFILIATE_TYPE_ACCOMMODATION AffiliateType = 0
	AffiliateType_AFFILIATE_TYPE_RIDE_HAILING  AffiliateType = 1
)

// Enum value maps for AffiliateType.
var (
	AffiliateType_name = map[int32]string{
		0: "AFFILIATE_TYPE_ACCOMMODATION",
		1: "AFFILIATE_TYPE_RIDE_HAILING",
	}
	AffiliateType_value = map[string]int32{
		"AFFILIATE_TYPE_ACCOMMODATION": 0,
		"AFFILIATE_TYPE_RIDE_HAILING":  1,
	}
)

func (x AffiliateType) Enum() *AffiliateType {
	p := new(AffiliateType)
	*p = x
	return p
}

func (x AffiliateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AffiliateType) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[2].Descriptor()
}

func (AffiliateType) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[2]
}

func (x AffiliateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AffiliateType.Descriptor instead.
func (AffiliateType) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{2}
}

type ReferralStatus int32

const (
	ReferralStatus_REFERRAL_STATUS_SUCCESS   ReferralStatus = 0
	ReferralStatus_REFERRAL_STATUS_PENDING   ReferralStatus = 1
	ReferralStatus_REFERRAL_STATUS_FAILED    ReferralStatus = 2
	ReferralStatus_REFERRAL_STATUS_CANCELLED ReferralStatus = 3
)

// Enum value maps for ReferralStatus.
var (
	ReferralStatus_name = map[int32]string{
		0: "REFERRAL_STATUS_SUCCESS",
		1: "REFERRAL_STATUS_PENDING",
		2: "REFERRAL_STATUS_FAILED",
		3: "REFERRAL_STATUS_CANCELLED",
	}
	ReferralStatus_value = map[string]int32{
		"REFERRAL_STATUS_SUCCESS":   0,
		"REFERRAL_STATUS_PENDING":   1,
		"REFERRAL_STATUS_FAILED":    2,
		"REFERRAL_STATUS_CANCELLED": 3,
	}
)

func (x ReferralStatus) Enum() *ReferralStatus {
	p := new(ReferralStatus)
	*p = x
	return p
}

func (x ReferralStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferralStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[3].Descriptor()
}

func (ReferralStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[3]
}

func (x ReferralStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferralStatus.Descriptor instead.
func (ReferralStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{3}
}

type BookingStatus int32

const (
	BookingStatus_BOOKING_STATUS_SUCCESS   BookingStatus = 0
	BookingStatus_BOOKING_STATUS_PENDING   BookingStatus = 1
	BookingStatus_BOOKING_STATUS_FAILED    BookingStatus = 2
	BookingStatus_BOOKING_STATUS_CANCELLED BookingStatus = 3
)

// Enum value maps for BookingStatus.
var (
	BookingStatus_name = map[int32]string{
		0: "BOOKING_STATUS_SUCCESS",
		1: "BOOKING_STATUS_PENDING",
		2: "BOOKING_STATUS_FAILED",
		3: "BOOKING_STATUS_CANCELLED",
	}
	BookingStatus_value = map[string]int32{
		"BOOKING_STATUS_SUCCESS":   0,
		"BOOKING_STATUS_PENDING":   1,
		"BOOKING_STATUS_FAILED":    2,
		"BOOKING_STATUS_CANCELLED": 3,
	}
)

func (x BookingStatus) Enum() *BookingStatus {
	p := new(BookingStatus)
	*p = x
	return p
}

func (x BookingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[4].Descriptor()
}

func (BookingStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[4]
}

func (x BookingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingStatus.Descriptor instead.
func (BookingStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{4}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_SUCCESS  PaymentStatus = 0
	PaymentStatus_PAYMENT_STATUS_PENDING  PaymentStatus = 1
	PaymentStatus_PAYMENT_STATUS_FAILED   PaymentStatus = 2
	PaymentStatus_PAYMENT_STATUS_REFUNDED PaymentStatus = 3
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0: "PAYMENT_STATUS_SUCCESS",
		1: "PAYMENT_STATUS_PENDING",
		2: "PAYMENT_STATUS_FAILED",
		3: "PAYMENT_STATUS_REFUNDED",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_SUCCESS":  0,
		"PAYMENT_STATUS_PENDING":  1,
		"PAYMENT_STATUS_FAILED":   2,
		"PAYMENT_STATUS_REFUNDED": 3,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[5].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[5]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{5}
}

type TicketType int32

const (
	TicketType_TICKET_TYPE_CITIZEN TicketType = 0
	TicketType_TICKET_TYPE_TOURIST TicketType = 1
)

// Enum value maps for TicketType.
var (
	TicketType_name = map[int32]string{
		0: "TICKET_TYPE_CITIZEN",
		1: "TICKET_TYPE_TOURIST",
	}
	TicketType_value = map[string]int32{
		"TICKET_TYPE_CITIZEN": 0,
		"TICKET_TYPE_TOURIST": 1,
	}
)

func (x TicketType) Enum() *TicketType {
	p := new(TicketType)
	*p = x
	return p
}

func (x TicketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketType) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[6].Descriptor()
}

func (TicketType) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[6]
}

func (x TicketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketType.Descriptor instead.
func (TicketType) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{6}
}

type TicketSlot int32

const (
	TicketSlot_SLOT_CORGI_1030_1200 TicketSlot = 0
	TicketSlot_SLOT_CORGI_1230_1400 TicketSlot = 1
	TicketSlot_SLOT_DOGS_1430_1600  TicketSlot = 2
	TicketSlot_SLOT_DOGS_1700_1830  TicketSlot = 3
)

// Enum value maps for TicketSlot.
var (
	TicketSlot_name = map[int32]string{
		0: "SLOT_CORGI_1030_1200",
		1: "SLOT_CORGI_1230_1400",
		2: "SLOT_DOGS_1430_1600",
		3: "SLOT_DOGS_1700_1830",
	}
	TicketSlot_value = map[string]int32{
		"SLOT_CORGI_1030_1200": 0,
		"SLOT_CORGI_1230_1400": 1,
		"SLOT_DOGS_1430_1600":  2,
		"SLOT_DOGS_1700_1830":  3,
	}
)

func (x TicketSlot) Enum() *TicketSlot {
	p := new(TicketSlot)
	*p = x
	return p
}

func (x TicketSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TicketSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[7].Descriptor()
}

func (TicketSlot) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[7]
}

func (x TicketSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TicketSlot.Descriptor instead.
func (TicketSlot) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{7}
}

type TimeSelectorPeriod int32

const (
	TimeSelectorPeriod_PERIOD_NONE         TimeSelectorPeriod = 0
	TimeSelectorPeriod_PERIOD_DAY          TimeSelectorPeriod = 1
	TimeSelectorPeriod_PERIOD_WEEK         TimeSelectorPeriod = 2
	TimeSelectorPeriod_PERIOD_MONTH        TimeSelectorPeriod = 3
	TimeSelectorPeriod_PERIOD_RANGE        TimeSelectorPeriod = 4
	TimeSelectorPeriod_PERIOD_LAST_7_DAYS  TimeSelectorPeriod = 5
	TimeSelectorPeriod_PERIOD_LAST_28_DAYS TimeSelectorPeriod = 6
)

// Enum value maps for TimeSelectorPeriod.
var (
	TimeSelectorPeriod_name = map[int32]string{
		0: "PERIOD_NONE",
		1: "PERIOD_DAY",
		2: "PERIOD_WEEK",
		3: "PERIOD_MONTH",
		4: "PERIOD_RANGE",
		5: "PERIOD_LAST_7_DAYS",
		6: "PERIOD_LAST_28_DAYS",
	}
	TimeSelectorPeriod_value = map[string]int32{
		"PERIOD_NONE":         0,
		"PERIOD_DAY":          1,
		"PERIOD_WEEK":         2,
		"PERIOD_MONTH":        3,
		"PERIOD_RANGE":        4,
		"PERIOD_LAST_7_DAYS":  5,
		"PERIOD_LAST_28_DAYS": 6,
	}
)

func (x TimeSelectorPeriod) Enum() *TimeSelectorPeriod {
	p := new(TimeSelectorPeriod)
	*p = x
	return p
}

func (x TimeSelectorPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSelectorPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_affiliate_proto_enumTypes[8].Descriptor()
}

func (TimeSelectorPeriod) Type() protoreflect.EnumType {
	return &file_affiliate_proto_enumTypes[8]
}

func (x TimeSelectorPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSelectorPeriod.Descriptor instead.
func (TimeSelectorPeriod) EnumDescriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{8}
}

type RequestMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken *string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3,oneof" json:"user_token,omitempty"`
}

func (x *RequestMeta) Reset() {
	*x = RequestMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMeta) ProtoMessage() {}

func (x *RequestMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMeta.ProtoReflect.Descriptor instead.
func (*RequestMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{0}
}

func (x *RequestMeta) GetUserToken() string {
	if x != nil && x.UserToken != nil {
		return *x.UserToken
	}
	return ""
}

type ResponseMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode *int64  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMsg  *string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3,oneof" json:"error_msg,omitempty"`
}

func (x *ResponseMeta) Reset() {
	*x = ResponseMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMeta) ProtoMessage() {}

func (x *ResponseMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMeta.ProtoReflect.Descriptor instead.
func (*ResponseMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMeta) GetErrorCode() int64 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *ResponseMeta) GetErrorMsg() string {
	if x != nil && x.ErrorMsg != nil {
		return *x.ErrorMsg
	}
	return ""
}

type GenericResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *GenericResponse) Reset() {
	*x = GenericResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericResponse) ProtoMessage() {}

func (x *GenericResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericResponse.ProtoReflect.Descriptor instead.
func (*GenericResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{2}
}

func (x *GenericResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

// Direct from user_table
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserName        *string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	UserEmail       *string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3,oneof" json:"user_email,omitempty"`
	UserContact     *string `protobuf:"bytes,4,opt,name=user_contact,json=userContact,proto3,oneof" json:"user_contact,omitempty"`
	UserRole        *int64  `protobuf:"varint,5,opt,name=user_role,json=userRole,proto3,oneof" json:"user_role,omitempty"`
	CreateTimestamp *int64  `protobuf:"varint,6,opt,name=create_timestamp,json=createTimestamp,proto3,oneof" json:"create_timestamp,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *User) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *User) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

func (x *User) GetUserContact() string {
	if x != nil && x.UserContact != nil {
		return *x.UserContact
	}
	return ""
}

func (x *User) GetUserRole() int64 {
	if x != nil && x.UserRole != nil {
		return *x.UserRole
	}
	return 0
}

func (x *User) GetCreateTimestamp() int64 {
	if x != nil && x.CreateTimestamp != nil {
		return *x.CreateTimestamp
	}
	return 0
}

// Direct from affiliate_details_table
type AffiliateDetailsDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	EntityName         *string `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3,oneof" json:"entity_name,omitempty"`
	EntityIdentifier   *string `protobuf:"bytes,3,opt,name=entity_identifier,json=entityIdentifier,proto3,oneof" json:"entity_identifier,omitempty"`
	AffiliateType      *int64  `protobuf:"varint,4,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode *string `protobuf:"bytes,5,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
}

func (x *AffiliateDetailsDb) Reset() {
	*x = AffiliateDetailsDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateDetailsDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateDetailsDb) ProtoMessage() {}

func (x *AffiliateDetailsDb) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateDetailsDb.ProtoReflect.Descriptor instead.
func (*AffiliateDetailsDb) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{4}
}

func (x *AffiliateDetailsDb) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AffiliateDetailsDb) GetEntityName() string {
	if x != nil && x.EntityName != nil {
		return *x.EntityName
	}
	return ""
}

func (x *AffiliateDetailsDb) GetEntityIdentifier() string {
	if x != nil && x.EntityIdentifier != nil {
		return *x.EntityIdentifier
	}
	return ""
}

func (x *AffiliateDetailsDb) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateDetailsDb) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

// Joining user_table, affiliate_details_table and referral_table
type AffiliateMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffiliateId        *int64  `protobuf:"varint,1,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	AffiliateName      *string `protobuf:"bytes,2,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
	AffiliateType      *int64  `protobuf:"varint,3,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode *string `protobuf:"bytes,4,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
	ReferralCount      *int64  `protobuf:"varint,5,opt,name=referral_count,json=referralCount,proto3,oneof" json:"referral_count,omitempty"`
	ReferralClicks     *int64  `protobuf:"varint,6,opt,name=referral_clicks,json=referralClicks,proto3,oneof" json:"referral_clicks,omitempty"`
	ReferralCommission *int64  `protobuf:"varint,7,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
	TotalRevenue       *int64  `protobuf:"varint,8,opt,name=total_revenue,json=totalRevenue,proto3,oneof" json:"total_revenue,omitempty"`
}

func (x *AffiliateMeta) Reset() {
	*x = AffiliateMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateMeta) ProtoMessage() {}

func (x *AffiliateMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateMeta.ProtoReflect.Descriptor instead.
func (*AffiliateMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{5}
}

func (x *AffiliateMeta) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *AffiliateMeta) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

func (x *AffiliateMeta) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateMeta) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

func (x *AffiliateMeta) GetReferralCount() int64 {
	if x != nil && x.ReferralCount != nil {
		return *x.ReferralCount
	}
	return 0
}

func (x *AffiliateMeta) GetReferralClicks() int64 {
	if x != nil && x.ReferralClicks != nil {
		return *x.ReferralClicks
	}
	return 0
}

func (x *AffiliateMeta) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

func (x *AffiliateMeta) GetTotalRevenue() int64 {
	if x != nil && x.TotalRevenue != nil {
		return *x.TotalRevenue
	}
	return 0
}

// Direct from referral_table
type ReferralDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	AffiliateId        *int64 `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	ReferralClickTime  *int64 `protobuf:"varint,3,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64 `protobuf:"varint,4,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	BookingId          *int64 `protobuf:"varint,5,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingTime        *int64 `protobuf:"varint,6,opt,name=booking_time,json=bookingTime,proto3,oneof" json:"booking_time,omitempty"`
	ReferralCommission *int64 `protobuf:"varint,7,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
}

func (x *ReferralDb) Reset() {
	*x = ReferralDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralDb) ProtoMessage() {}

func (x *ReferralDb) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralDb.ProtoReflect.Descriptor instead.
func (*ReferralDb) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{6}
}

func (x *ReferralDb) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralDb) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *ReferralDb) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralDb) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralDb) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *ReferralDb) GetBookingTime() int64 {
	if x != nil && x.BookingTime != nil {
		return *x.BookingTime
	}
	return 0
}

func (x *ReferralDb) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

// Join referral_table, booking_details_table
type ReferralDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64          `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	AffiliateId        *int64          `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	ReferralClickTime  *int64          `protobuf:"varint,3,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64          `protobuf:"varint,4,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	BookingId          *int64          `protobuf:"varint,5,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingDetails     *BookingDetails `protobuf:"bytes,6,opt,name=booking_details,json=bookingDetails,proto3,oneof" json:"booking_details,omitempty"` //nil if referral is not successful
	ReferralCommission *int64          `protobuf:"varint,7,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
}

func (x *ReferralDetails) Reset() {
	*x = ReferralDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralDetails) ProtoMessage() {}

func (x *ReferralDetails) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralDetails.ProtoReflect.Descriptor instead.
func (*ReferralDetails) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{7}
}

func (x *ReferralDetails) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralDetails) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *ReferralDetails) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralDetails) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralDetails) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *ReferralDetails) GetBookingDetails() *BookingDetails {
	if x != nil {
		return x.BookingDetails
	}
	return nil
}

func (x *ReferralDetails) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

type ReferralBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64  `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	ReferralClickTime  *int64  `protobuf:"varint,2,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus     *int64  `protobuf:"varint,3,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
	ReferralCommission *int64  `protobuf:"varint,4,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
	BookingRefId       *int64  `protobuf:"varint,5,opt,name=booking_ref_id,json=bookingRefId,proto3,oneof" json:"booking_ref_id,omitempty"`
	BookingTime        *int64  `protobuf:"varint,6,opt,name=booking_time,json=bookingTime,proto3,oneof" json:"booking_time,omitempty"`
	TotalTicketCount   *int64  `protobuf:"varint,7,opt,name=total_ticket_count,json=totalTicketCount,proto3,oneof" json:"total_ticket_count,omitempty"`
	TotalTicketAmount  *int64  `protobuf:"varint,8,opt,name=total_ticket_amount,json=totalTicketAmount,proto3,oneof" json:"total_ticket_amount,omitempty"`
	AffiliateName      *string `protobuf:"bytes,9,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
}

func (x *ReferralBasic) Reset() {
	*x = ReferralBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralBasic) ProtoMessage() {}

func (x *ReferralBasic) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralBasic.ProtoReflect.Descriptor instead.
func (*ReferralBasic) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{8}
}

func (x *ReferralBasic) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralBasic) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralBasic) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

func (x *ReferralBasic) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

func (x *ReferralBasic) GetBookingRefId() int64 {
	if x != nil && x.BookingRefId != nil {
		return *x.BookingRefId
	}
	return 0
}

func (x *ReferralBasic) GetBookingTime() int64 {
	if x != nil && x.BookingTime != nil {
		return *x.BookingTime
	}
	return 0
}

func (x *ReferralBasic) GetTotalTicketCount() int64 {
	if x != nil && x.TotalTicketCount != nil {
		return *x.TotalTicketCount
	}
	return 0
}

func (x *ReferralBasic) GetTotalTicketAmount() int64 {
	if x != nil && x.TotalTicketAmount != nil {
		return *x.TotalTicketAmount
	}
	return 0
}

func (x *ReferralBasic) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

type CustomerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerName   *string `protobuf:"bytes,1,opt,name=customer_name,json=customerName,proto3,oneof" json:"customer_name,omitempty"`
	CustomerMobile *string `protobuf:"bytes,2,opt,name=customer_mobile,json=customerMobile,proto3,oneof" json:"customer_mobile,omitempty"`
	CustomerEmail  *string `protobuf:"bytes,3,opt,name=customer_email,json=customerEmail,proto3,oneof" json:"customer_email,omitempty"`
	TicketType     *int64  `protobuf:"varint,4,opt,name=ticket_type,json=ticketType,proto3,oneof" json:"ticket_type,omitempty"`
	TicketPrice    *int64  `protobuf:"varint,5,opt,name=ticket_price,json=ticketPrice,proto3,oneof" json:"ticket_price,omitempty"`
}

func (x *CustomerInfo) Reset() {
	*x = CustomerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerInfo) ProtoMessage() {}

func (x *CustomerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerInfo.ProtoReflect.Descriptor instead.
func (*CustomerInfo) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{9}
}

func (x *CustomerInfo) GetCustomerName() string {
	if x != nil && x.CustomerName != nil {
		return *x.CustomerName
	}
	return ""
}

func (x *CustomerInfo) GetCustomerMobile() string {
	if x != nil && x.CustomerMobile != nil {
		return *x.CustomerMobile
	}
	return ""
}

func (x *CustomerInfo) GetCustomerEmail() string {
	if x != nil && x.CustomerEmail != nil {
		return *x.CustomerEmail
	}
	return ""
}

func (x *CustomerInfo) GetTicketType() int64 {
	if x != nil && x.TicketType != nil {
		return *x.TicketType
	}
	return 0
}

func (x *CustomerInfo) GetTicketPrice() int64 {
	if x != nil && x.TicketPrice != nil {
		return *x.TicketPrice
	}
	return 0
}

// Direct from booking_details_table
type BookingDetailsDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId          *int64  `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingStatus      *int64  `protobuf:"varint,2,opt,name=booking_status,json=bookingStatus,proto3,oneof" json:"booking_status,omitempty"`
	BookingDay         *string `protobuf:"bytes,3,opt,name=booking_day,json=bookingDay,proto3,oneof" json:"booking_day,omitempty"`
	BookingSlot        *int64  `protobuf:"varint,4,opt,name=booking_slot,json=bookingSlot,proto3,oneof" json:"booking_slot,omitempty"`
	TransactionTime    *int64  `protobuf:"varint,5,opt,name=transaction_time,json=transactionTime,proto3,oneof" json:"transaction_time,omitempty"`
	PaymentStatus      *int64  `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	CitizenTicketCount *int64  `protobuf:"varint,7,opt,name=citizen_ticket_count,json=citizenTicketCount,proto3,oneof" json:"citizen_ticket_count,omitempty"`
	TouristTicketCount *int64  `protobuf:"varint,8,opt,name=tourist_ticket_count,json=touristTicketCount,proto3,oneof" json:"tourist_ticket_count,omitempty"`
	CitizenTicketTotal *int64  `protobuf:"varint,9,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"`
	TouristTicketTotal *int64  `protobuf:"varint,10,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	CustomerInfo       []byte  `protobuf:"bytes,11,opt,name=customer_info,json=customerInfo,proto3,oneof" json:"customer_info,omitempty"`
}

func (x *BookingDetailsDb) Reset() {
	*x = BookingDetailsDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDetailsDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDetailsDb) ProtoMessage() {}

func (x *BookingDetailsDb) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDetailsDb.ProtoReflect.Descriptor instead.
func (*BookingDetailsDb) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{10}
}

func (x *BookingDetailsDb) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *BookingDetailsDb) GetBookingStatus() int64 {
	if x != nil && x.BookingStatus != nil {
		return *x.BookingStatus
	}
	return 0
}

func (x *BookingDetailsDb) GetBookingDay() string {
	if x != nil && x.BookingDay != nil {
		return *x.BookingDay
	}
	return ""
}

func (x *BookingDetailsDb) GetBookingSlot() int64 {
	if x != nil && x.BookingSlot != nil {
		return *x.BookingSlot
	}
	return 0
}

func (x *BookingDetailsDb) GetTransactionTime() int64 {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return 0
}

func (x *BookingDetailsDb) GetPaymentStatus() int64 {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return 0
}

func (x *BookingDetailsDb) GetCitizenTicketCount() int64 {
	if x != nil && x.CitizenTicketCount != nil {
		return *x.CitizenTicketCount
	}
	return 0
}

func (x *BookingDetailsDb) GetTouristTicketCount() int64 {
	if x != nil && x.TouristTicketCount != nil {
		return *x.TouristTicketCount
	}
	return 0
}

func (x *BookingDetailsDb) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *BookingDetailsDb) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *BookingDetailsDb) GetCustomerInfo() []byte {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

type BookingBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId          *int64  `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingStatus      *int64  `protobuf:"varint,2,opt,name=booking_status,json=bookingStatus,proto3,oneof" json:"booking_status,omitempty"`
	BookingDay         *string `protobuf:"bytes,3,opt,name=booking_day,json=bookingDay,proto3,oneof" json:"booking_day,omitempty"`
	BookingSlot        *int64  `protobuf:"varint,4,opt,name=booking_slot,json=bookingSlot,proto3,oneof" json:"booking_slot,omitempty"`
	TransactionTime    *int64  `protobuf:"varint,5,opt,name=transaction_time,json=transactionTime,proto3,oneof" json:"transaction_time,omitempty"`
	PaymentStatus      *int64  `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	CitizenTicketCount *int64  `protobuf:"varint,7,opt,name=citizen_ticket_count,json=citizenTicketCount,proto3,oneof" json:"citizen_ticket_count,omitempty"`
	TouristTicketCount *int64  `protobuf:"varint,8,opt,name=tourist_ticket_count,json=touristTicketCount,proto3,oneof" json:"tourist_ticket_count,omitempty"`
	TicketTotal        *int64  `protobuf:"varint,9,opt,name=ticket_total,json=ticketTotal,proto3,oneof" json:"ticket_total,omitempty"`
}

func (x *BookingBasic) Reset() {
	*x = BookingBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingBasic) ProtoMessage() {}

func (x *BookingBasic) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingBasic.ProtoReflect.Descriptor instead.
func (*BookingBasic) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{11}
}

func (x *BookingBasic) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *BookingBasic) GetBookingStatus() int64 {
	if x != nil && x.BookingStatus != nil {
		return *x.BookingStatus
	}
	return 0
}

func (x *BookingBasic) GetBookingDay() string {
	if x != nil && x.BookingDay != nil {
		return *x.BookingDay
	}
	return ""
}

func (x *BookingBasic) GetBookingSlot() int64 {
	if x != nil && x.BookingSlot != nil {
		return *x.BookingSlot
	}
	return 0
}

func (x *BookingBasic) GetTransactionTime() int64 {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return 0
}

func (x *BookingBasic) GetPaymentStatus() int64 {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return 0
}

func (x *BookingBasic) GetCitizenTicketCount() int64 {
	if x != nil && x.CitizenTicketCount != nil {
		return *x.CitizenTicketCount
	}
	return 0
}

func (x *BookingBasic) GetTouristTicketCount() int64 {
	if x != nil && x.TouristTicketCount != nil {
		return *x.TouristTicketCount
	}
	return 0
}

func (x *BookingBasic) GetTicketTotal() int64 {
	if x != nil && x.TicketTotal != nil {
		return *x.TicketTotal
	}
	return 0
}

type BookingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId          *int64          `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
	BookingStatus      *int64          `protobuf:"varint,2,opt,name=booking_status,json=bookingStatus,proto3,oneof" json:"booking_status,omitempty"`
	BookingDay         *string         `protobuf:"bytes,3,opt,name=booking_day,json=bookingDay,proto3,oneof" json:"booking_day,omitempty"`
	BookingSlot        *int64          `protobuf:"varint,4,opt,name=booking_slot,json=bookingSlot,proto3,oneof" json:"booking_slot,omitempty"`
	TransactionTime    *int64          `protobuf:"varint,5,opt,name=transaction_time,json=transactionTime,proto3,oneof" json:"transaction_time,omitempty"`
	PaymentStatus      *int64          `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,proto3,oneof" json:"payment_status,omitempty"`
	CitizenTicketCount *int64          `protobuf:"varint,7,opt,name=citizen_ticket_count,json=citizenTicketCount,proto3,oneof" json:"citizen_ticket_count,omitempty"`
	TouristTicketCount *int64          `protobuf:"varint,8,opt,name=tourist_ticket_count,json=touristTicketCount,proto3,oneof" json:"tourist_ticket_count,omitempty"`
	CitizenTicketTotal *int64          `protobuf:"varint,9,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"`
	TouristTicketTotal *int64          `protobuf:"varint,10,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	CustomerInfo       []*CustomerInfo `protobuf:"bytes,11,rep,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"`
}

func (x *BookingDetails) Reset() {
	*x = BookingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDetails) ProtoMessage() {}

func (x *BookingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDetails.ProtoReflect.Descriptor instead.
func (*BookingDetails) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{12}
}

func (x *BookingDetails) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

func (x *BookingDetails) GetBookingStatus() int64 {
	if x != nil && x.BookingStatus != nil {
		return *x.BookingStatus
	}
	return 0
}

func (x *BookingDetails) GetBookingDay() string {
	if x != nil && x.BookingDay != nil {
		return *x.BookingDay
	}
	return ""
}

func (x *BookingDetails) GetBookingSlot() int64 {
	if x != nil && x.BookingSlot != nil {
		return *x.BookingSlot
	}
	return 0
}

func (x *BookingDetails) GetTransactionTime() int64 {
	if x != nil && x.TransactionTime != nil {
		return *x.TransactionTime
	}
	return 0
}

func (x *BookingDetails) GetPaymentStatus() int64 {
	if x != nil && x.PaymentStatus != nil {
		return *x.PaymentStatus
	}
	return 0
}

func (x *BookingDetails) GetCitizenTicketCount() int64 {
	if x != nil && x.CitizenTicketCount != nil {
		return *x.CitizenTicketCount
	}
	return 0
}

func (x *BookingDetails) GetTouristTicketCount() int64 {
	if x != nil && x.TouristTicketCount != nil {
		return *x.TouristTicketCount
	}
	return 0
}

func (x *BookingDetails) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *BookingDetails) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *BookingDetails) GetCustomerInfo() []*CustomerInfo {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

type AffiliateMetaTopCommission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                  *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	AffiliateName           *string `protobuf:"bytes,2,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
	AffiliateType           *int64  `protobuf:"varint,3,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode      *string `protobuf:"bytes,4,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
	TotalCommission         *int64  `protobuf:"varint,5,opt,name=total_commission,json=totalCommission,proto3,oneof" json:"total_commission,omitempty"`
	PreviousCycleCommission *int64  `protobuf:"varint,6,opt,name=previous_cycle_commission,json=previousCycleCommission,proto3,oneof" json:"previous_cycle_commission,omitempty"`
}

func (x *AffiliateMetaTopCommission) Reset() {
	*x = AffiliateMetaTopCommission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateMetaTopCommission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateMetaTopCommission) ProtoMessage() {}

func (x *AffiliateMetaTopCommission) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateMetaTopCommission.ProtoReflect.Descriptor instead.
func (*AffiliateMetaTopCommission) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{13}
}

func (x *AffiliateMetaTopCommission) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AffiliateMetaTopCommission) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

func (x *AffiliateMetaTopCommission) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateMetaTopCommission) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

func (x *AffiliateMetaTopCommission) GetTotalCommission() int64 {
	if x != nil && x.TotalCommission != nil {
		return *x.TotalCommission
	}
	return 0
}

func (x *AffiliateMetaTopCommission) GetPreviousCycleCommission() int64 {
	if x != nil && x.PreviousCycleCommission != nil {
		return *x.PreviousCycleCommission
	}
	return 0
}

type AffiliateMetaTopReferral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	AffiliateName          *string `protobuf:"bytes,2,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
	AffiliateType          *int64  `protobuf:"varint,3,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode     *string `protobuf:"bytes,4,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
	TotalReferrals         *int64  `protobuf:"varint,5,opt,name=total_referrals,json=totalReferrals,proto3,oneof" json:"total_referrals,omitempty"`
	PreviousCycleReferrals *int64  `protobuf:"varint,6,opt,name=previous_cycle_referrals,json=previousCycleReferrals,proto3,oneof" json:"previous_cycle_referrals,omitempty"`
}

func (x *AffiliateMetaTopReferral) Reset() {
	*x = AffiliateMetaTopReferral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateMetaTopReferral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateMetaTopReferral) ProtoMessage() {}

func (x *AffiliateMetaTopReferral) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateMetaTopReferral.ProtoReflect.Descriptor instead.
func (*AffiliateMetaTopReferral) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{14}
}

func (x *AffiliateMetaTopReferral) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AffiliateMetaTopReferral) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

func (x *AffiliateMetaTopReferral) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateMetaTopReferral) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

func (x *AffiliateMetaTopReferral) GetTotalReferrals() int64 {
	if x != nil && x.TotalReferrals != nil {
		return *x.TotalReferrals
	}
	return 0
}

func (x *AffiliateMetaTopReferral) GetPreviousCycleReferrals() int64 {
	if x != nil && x.PreviousCycleReferrals != nil {
		return *x.PreviousCycleReferrals
	}
	return 0
}

type AffiliateCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CitizenTicketTotal     *int64 `protobuf:"varint,1,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"` //citizen_ticket_total,tourist_ticket_total from referral_table join booking_table
	TouristTicketTotal     *int64 `protobuf:"varint,2,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	TotalCommission        *int64 `protobuf:"varint,3,opt,name=total_commission,json=totalCommission,proto3,oneof" json:"total_commission,omitempty"`                        //SUM(referral_table.referral_commission)
	TotalActiveAffiliates  *int64 `protobuf:"varint,4,opt,name=total_active_affiliates,json=totalActiveAffiliates,proto3,oneof" json:"total_active_affiliates,omitempty"`    //COUNT(referral_table.affiliate_id)
	TotalAffiliateBookings *int64 `protobuf:"varint,5,opt,name=total_affiliate_bookings,json=totalAffiliateBookings,proto3,oneof" json:"total_affiliate_bookings,omitempty"` //COUNT(referral_table.referral_id)
}

func (x *AffiliateCoreStats) Reset() {
	*x = AffiliateCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateCoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateCoreStats) ProtoMessage() {}

func (x *AffiliateCoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateCoreStats.ProtoReflect.Descriptor instead.
func (*AffiliateCoreStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{15}
}

func (x *AffiliateCoreStats) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *AffiliateCoreStats) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *AffiliateCoreStats) GetTotalCommission() int64 {
	if x != nil && x.TotalCommission != nil {
		return *x.TotalCommission
	}
	return 0
}

func (x *AffiliateCoreStats) GetTotalActiveAffiliates() int64 {
	if x != nil && x.TotalActiveAffiliates != nil {
		return *x.TotalActiveAffiliates
	}
	return 0
}

func (x *AffiliateCoreStats) GetTotalAffiliateBookings() int64 {
	if x != nil && x.TotalAffiliateBookings != nil {
		return *x.TotalAffiliateBookings
	}
	return 0
}

type AffiliateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreStats *AffiliateCoreStats `protobuf:"bytes,1,opt,name=core_stats,json=coreStats,proto3,oneof" json:"core_stats,omitempty"`
	StartTime *int64              `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime   *int64              `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *AffiliateStats) Reset() {
	*x = AffiliateStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateStats) ProtoMessage() {}

func (x *AffiliateStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateStats.ProtoReflect.Descriptor instead.
func (*AffiliateStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{16}
}

func (x *AffiliateStats) GetCoreStats() *AffiliateCoreStats {
	if x != nil {
		return x.CoreStats
	}
	return nil
}

func (x *AffiliateStats) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *AffiliateStats) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type AffiliateRanking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopAffiliateReferralList   []*AffiliateMetaTopReferral   `protobuf:"bytes,1,rep,name=top_affiliate_referral_list,json=topAffiliateReferralList,proto3" json:"top_affiliate_referral_list,omitempty"`       //By referral count: affiliate_id, COUNT(referral_id) GROUP BY affiliate_id ORDER BY COUNT(referral_id) DESC LIMIT 5
	TopAffiliateCommissionList []*AffiliateMetaTopCommission `protobuf:"bytes,2,rep,name=top_affiliate_commission_list,json=topAffiliateCommissionList,proto3" json:"top_affiliate_commission_list,omitempty"` //By total commission: affiliate_id, SUM(referral_table.referral_commission) GROUP BY affiliate_id ORDER BY SUM(referral_commission) DESC LIMIT 5
	StartTime                  *int64                        `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime                    *int64                        `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *AffiliateRanking) Reset() {
	*x = AffiliateRanking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateRanking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateRanking) ProtoMessage() {}

func (x *AffiliateRanking) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateRanking.ProtoReflect.Descriptor instead.
func (*AffiliateRanking) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{17}
}

func (x *AffiliateRanking) GetTopAffiliateReferralList() []*AffiliateMetaTopReferral {
	if x != nil {
		return x.TopAffiliateReferralList
	}
	return nil
}

func (x *AffiliateRanking) GetTopAffiliateCommissionList() []*AffiliateMetaTopCommission {
	if x != nil {
		return x.TopAffiliateCommissionList
	}
	return nil
}

func (x *AffiliateRanking) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *AffiliateRanking) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type TimeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseTs  *int64 `protobuf:"varint,1,opt,name=base_ts,json=baseTs,proto3,oneof" json:"base_ts,omitempty"`
	StartTs *int64 `protobuf:"varint,2,opt,name=start_ts,json=startTs,proto3,oneof" json:"start_ts,omitempty"`
	EndTs   *int64 `protobuf:"varint,3,opt,name=end_ts,json=endTs,proto3,oneof" json:"end_ts,omitempty"`
	Period  *int64 `protobuf:"varint,4,opt,name=period,proto3,oneof" json:"period,omitempty"`
}

func (x *TimeSelector) Reset() {
	*x = TimeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSelector) ProtoMessage() {}

func (x *TimeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSelector.ProtoReflect.Descriptor instead.
func (*TimeSelector) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{18}
}

func (x *TimeSelector) GetBaseTs() int64 {
	if x != nil && x.BaseTs != nil {
		return *x.BaseTs
	}
	return 0
}

func (x *TimeSelector) GetStartTs() int64 {
	if x != nil && x.StartTs != nil {
		return *x.StartTs
	}
	return 0
}

func (x *TimeSelector) GetEndTs() int64 {
	if x != nil && x.EndTs != nil {
		return *x.EndTs
	}
	return 0
}

func (x *TimeSelector) GetPeriod() int64 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

// Admin to view all affiliate stats
type GetAffiliateStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
}

func (x *GetAffiliateStatsRequest) Reset() {
	*x = GetAffiliateStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateStatsRequest) ProtoMessage() {}

func (x *GetAffiliateStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateStatsRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateStatsRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{19}
}

func (x *GetAffiliateStatsRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetAffiliateStatsRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

// Also get time stats based on datepicker start end timestamp
type GetAffiliateStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta                *ResponseMeta   `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateStats              *AffiliateStats `protobuf:"bytes,2,opt,name=affiliate_stats,json=affiliateStats,proto3,oneof" json:"affiliate_stats,omitempty"`
	AffiliateStatsPreviousCycle *AffiliateStats `protobuf:"bytes,3,opt,name=affiliate_stats_previous_cycle,json=affiliateStatsPreviousCycle,proto3,oneof" json:"affiliate_stats_previous_cycle,omitempty"`
}

func (x *GetAffiliateStatsResponse) Reset() {
	*x = GetAffiliateStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateStatsResponse) ProtoMessage() {}

func (x *GetAffiliateStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateStatsResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateStatsResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{20}
}

func (x *GetAffiliateStatsResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateStatsResponse) GetAffiliateStats() *AffiliateStats {
	if x != nil {
		return x.AffiliateStats
	}
	return nil
}

func (x *GetAffiliateStatsResponse) GetAffiliateStatsPreviousCycle() *AffiliateStats {
	if x != nil {
		return x.AffiliateStatsPreviousCycle
	}
	return nil
}

// Admin to view top affiliates
type GetAffiliateRankingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetAffiliateRankingListRequest) Reset() {
	*x = GetAffiliateRankingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateRankingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateRankingListRequest) ProtoMessage() {}

func (x *GetAffiliateRankingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateRankingListRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateRankingListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{21}
}

func (x *GetAffiliateRankingListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

type GetAffiliateRankingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta     *ResponseMeta     `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateRanking *AffiliateRanking `protobuf:"bytes,2,opt,name=affiliate_ranking,json=affiliateRanking,proto3,oneof" json:"affiliate_ranking,omitempty"`
}

func (x *GetAffiliateRankingListResponse) Reset() {
	*x = GetAffiliateRankingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateRankingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateRankingListResponse) ProtoMessage() {}

func (x *GetAffiliateRankingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateRankingListResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateRankingListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{22}
}

func (x *GetAffiliateRankingListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateRankingListResponse) GetAffiliateRanking() *AffiliateRanking {
	if x != nil {
		return x.AffiliateRanking
	}
	return nil
}

type AffiliateCoreTimedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateString             *string `protobuf:"bytes,1,opt,name=date_string,json=dateString,proto3,oneof" json:"date_string,omitempty"`
	CitizenTicketTotal     *int64  `protobuf:"varint,2,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"` //citizen_ticket_total,tourist_ticket_total from referral_table join booking_table
	TouristTicketTotal     *int64  `protobuf:"varint,3,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	TotalCommission        *int64  `protobuf:"varint,4,opt,name=total_commission,json=totalCommission,proto3,oneof" json:"total_commission,omitempty"`                        //SUM(referral_table.referral_commission)
	TotalActiveAffiliates  *int64  `protobuf:"varint,5,opt,name=total_active_affiliates,json=totalActiveAffiliates,proto3,oneof" json:"total_active_affiliates,omitempty"`    //COUNT(referral_table.affiliate_id)
	TotalAffiliateBookings *int64  `protobuf:"varint,6,opt,name=total_affiliate_bookings,json=totalAffiliateBookings,proto3,oneof" json:"total_affiliate_bookings,omitempty"` //COUNT(referral_table.referral_id)
}

func (x *AffiliateCoreTimedStats) Reset() {
	*x = AffiliateCoreTimedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateCoreTimedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateCoreTimedStats) ProtoMessage() {}

func (x *AffiliateCoreTimedStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateCoreTimedStats.ProtoReflect.Descriptor instead.
func (*AffiliateCoreTimedStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{23}
}

func (x *AffiliateCoreTimedStats) GetDateString() string {
	if x != nil && x.DateString != nil {
		return *x.DateString
	}
	return ""
}

func (x *AffiliateCoreTimedStats) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *AffiliateCoreTimedStats) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *AffiliateCoreTimedStats) GetTotalCommission() int64 {
	if x != nil && x.TotalCommission != nil {
		return *x.TotalCommission
	}
	return 0
}

func (x *AffiliateCoreTimedStats) GetTotalActiveAffiliates() int64 {
	if x != nil && x.TotalActiveAffiliates != nil {
		return *x.TotalActiveAffiliates
	}
	return 0
}

func (x *AffiliateCoreTimedStats) GetTotalAffiliateBookings() int64 {
	if x != nil && x.TotalAffiliateBookings != nil {
		return *x.TotalAffiliateBookings
	}
	return 0
}

type GetAffiliateTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
}

func (x *GetAffiliateTrendRequest) Reset() {
	*x = GetAffiliateTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateTrendRequest) ProtoMessage() {}

func (x *GetAffiliateTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateTrendRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateTrendRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{24}
}

func (x *GetAffiliateTrendRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetAffiliateTrendRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

// Get the revenue, commission, bookings trend within the period
type GetAffiliateTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta              `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	TimesStats   []*AffiliateCoreTimedStats `protobuf:"bytes,2,rep,name=times_stats,json=timesStats,proto3" json:"times_stats,omitempty"`
}

func (x *GetAffiliateTrendResponse) Reset() {
	*x = GetAffiliateTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateTrendResponse) ProtoMessage() {}

func (x *GetAffiliateTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateTrendResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateTrendResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{25}
}

func (x *GetAffiliateTrendResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateTrendResponse) GetTimesStats() []*AffiliateCoreTimedStats {
	if x != nil {
		return x.TimesStats
	}
	return nil
}

// Admin to view all affiliates
type GetAffiliateListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
}

func (x *GetAffiliateListRequest) Reset() {
	*x = GetAffiliateListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateListRequest) ProtoMessage() {}

func (x *GetAffiliateListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateListRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{26}
}

func (x *GetAffiliateListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetAffiliateListRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

type GetAffiliateListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateList []*AffiliateMeta `protobuf:"bytes,2,rep,name=affiliate_list,json=affiliateList,proto3" json:"affiliate_list,omitempty"`
	StartTime     *int64           `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime       *int64           `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *GetAffiliateListResponse) Reset() {
	*x = GetAffiliateListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateListResponse) ProtoMessage() {}

func (x *GetAffiliateListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateListResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{27}
}

func (x *GetAffiliateListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateListResponse) GetAffiliateList() []*AffiliateMeta {
	if x != nil {
		return x.AffiliateList
	}
	return nil
}

func (x *GetAffiliateListResponse) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetAffiliateListResponse) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

// Admin to view individual affiliate details with list of referrals
type GetAffiliateDetailsByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	AffiliateId *int64       `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
}

func (x *GetAffiliateDetailsByIdRequest) Reset() {
	*x = GetAffiliateDetailsByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateDetailsByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateDetailsByIdRequest) ProtoMessage() {}

func (x *GetAffiliateDetailsByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateDetailsByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAffiliateDetailsByIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{28}
}

func (x *GetAffiliateDetailsByIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

type GetAffiliateDetailsByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta      `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateMeta *AffiliateMeta     `protobuf:"bytes,2,opt,name=affiliate_meta,json=affiliateMeta,proto3,oneof" json:"affiliate_meta,omitempty"`
	ReferralList  []*ReferralDetails `protobuf:"bytes,3,rep,name=referral_list,json=referralList,proto3" json:"referral_list,omitempty"`
}

func (x *GetAffiliateDetailsByIdResponse) Reset() {
	*x = GetAffiliateDetailsByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAffiliateDetailsByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAffiliateDetailsByIdResponse) ProtoMessage() {}

func (x *GetAffiliateDetailsByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAffiliateDetailsByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAffiliateDetailsByIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{29}
}

func (x *GetAffiliateDetailsByIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdResponse) GetAffiliateMeta() *AffiliateMeta {
	if x != nil {
		return x.AffiliateMeta
	}
	return nil
}

func (x *GetAffiliateDetailsByIdResponse) GetReferralList() []*ReferralDetails {
	if x != nil {
		return x.ReferralList
	}
	return nil
}

type ReferralCoreStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CitizenTicketTotal *int64 `protobuf:"varint,1,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"`
	TouristTicketTotal *int64 `protobuf:"varint,2,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	TotalCommission    *int64 `protobuf:"varint,3,opt,name=total_commission,json=totalCommission,proto3,oneof" json:"total_commission,omitempty"`
	TotalClicks        *int64 `protobuf:"varint,4,opt,name=total_clicks,json=totalClicks,proto3,oneof" json:"total_clicks,omitempty"`
	TotalBookings      *int64 `protobuf:"varint,5,opt,name=total_bookings,json=totalBookings,proto3,oneof" json:"total_bookings,omitempty"`
}

func (x *ReferralCoreStats) Reset() {
	*x = ReferralCoreStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralCoreStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralCoreStats) ProtoMessage() {}

func (x *ReferralCoreStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralCoreStats.ProtoReflect.Descriptor instead.
func (*ReferralCoreStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{30}
}

func (x *ReferralCoreStats) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *ReferralCoreStats) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *ReferralCoreStats) GetTotalCommission() int64 {
	if x != nil && x.TotalCommission != nil {
		return *x.TotalCommission
	}
	return 0
}

func (x *ReferralCoreStats) GetTotalClicks() int64 {
	if x != nil && x.TotalClicks != nil {
		return *x.TotalClicks
	}
	return 0
}

func (x *ReferralCoreStats) GetTotalBookings() int64 {
	if x != nil && x.TotalBookings != nil {
		return *x.TotalBookings
	}
	return 0
}

type ReferralStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreStats *ReferralCoreStats `protobuf:"bytes,1,opt,name=core_stats,json=coreStats,proto3,oneof" json:"core_stats,omitempty"`
	StartTime *int64             `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime   *int64             `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *ReferralStats) Reset() {
	*x = ReferralStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralStats) ProtoMessage() {}

func (x *ReferralStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralStats.ProtoReflect.Descriptor instead.
func (*ReferralStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{31}
}

func (x *ReferralStats) GetCoreStats() *ReferralCoreStats {
	if x != nil {
		return x.CoreStats
	}
	return nil
}

func (x *ReferralStats) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ReferralStats) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

// Affiliates to view their referral stats
type GetReferralStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	AffiliateId  *int64        `protobuf:"varint,2,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,3,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
}

func (x *GetReferralStatsRequest) Reset() {
	*x = GetReferralStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatsRequest) ProtoMessage() {}

func (x *GetReferralStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatsRequest.ProtoReflect.Descriptor instead.
func (*GetReferralStatsRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{32}
}

func (x *GetReferralStatsRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralStatsRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *GetReferralStatsRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

type GetReferralStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta               *ResponseMeta  `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralStats              *ReferralStats `protobuf:"bytes,2,opt,name=referral_stats,json=referralStats,proto3,oneof" json:"referral_stats,omitempty"`
	ReferralStatsPreviousCycle *ReferralStats `protobuf:"bytes,3,opt,name=referral_stats_previous_cycle,json=referralStatsPreviousCycle,proto3,oneof" json:"referral_stats_previous_cycle,omitempty"`
}

func (x *GetReferralStatsResponse) Reset() {
	*x = GetReferralStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralStatsResponse) ProtoMessage() {}

func (x *GetReferralStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralStatsResponse.ProtoReflect.Descriptor instead.
func (*GetReferralStatsResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{33}
}

func (x *GetReferralStatsResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralStatsResponse) GetReferralStats() *ReferralStats {
	if x != nil {
		return x.ReferralStats
	}
	return nil
}

func (x *GetReferralStatsResponse) GetReferralStatsPreviousCycle() *ReferralStats {
	if x != nil {
		return x.ReferralStatsPreviousCycle
	}
	return nil
}

type ReferralCoreTimedStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateString         *string `protobuf:"bytes,1,opt,name=date_string,json=dateString,proto3,oneof" json:"date_string,omitempty"`
	CitizenTicketTotal *int64  `protobuf:"varint,2,opt,name=citizen_ticket_total,json=citizenTicketTotal,proto3,oneof" json:"citizen_ticket_total,omitempty"`
	TouristTicketTotal *int64  `protobuf:"varint,3,opt,name=tourist_ticket_total,json=touristTicketTotal,proto3,oneof" json:"tourist_ticket_total,omitempty"`
	TotalCommission    *int64  `protobuf:"varint,4,opt,name=total_commission,json=totalCommission,proto3,oneof" json:"total_commission,omitempty"`
	TotalClicks        *int64  `protobuf:"varint,5,opt,name=total_clicks,json=totalClicks,proto3,oneof" json:"total_clicks,omitempty"`
	TotalBookings      *int64  `protobuf:"varint,6,opt,name=total_bookings,json=totalBookings,proto3,oneof" json:"total_bookings,omitempty"`
}

func (x *ReferralCoreTimedStats) Reset() {
	*x = ReferralCoreTimedStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralCoreTimedStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralCoreTimedStats) ProtoMessage() {}

func (x *ReferralCoreTimedStats) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralCoreTimedStats.ProtoReflect.Descriptor instead.
func (*ReferralCoreTimedStats) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{34}
}

func (x *ReferralCoreTimedStats) GetDateString() string {
	if x != nil && x.DateString != nil {
		return *x.DateString
	}
	return ""
}

func (x *ReferralCoreTimedStats) GetCitizenTicketTotal() int64 {
	if x != nil && x.CitizenTicketTotal != nil {
		return *x.CitizenTicketTotal
	}
	return 0
}

func (x *ReferralCoreTimedStats) GetTouristTicketTotal() int64 {
	if x != nil && x.TouristTicketTotal != nil {
		return *x.TouristTicketTotal
	}
	return 0
}

func (x *ReferralCoreTimedStats) GetTotalCommission() int64 {
	if x != nil && x.TotalCommission != nil {
		return *x.TotalCommission
	}
	return 0
}

func (x *ReferralCoreTimedStats) GetTotalClicks() int64 {
	if x != nil && x.TotalClicks != nil {
		return *x.TotalClicks
	}
	return 0
}

func (x *ReferralCoreTimedStats) GetTotalBookings() int64 {
	if x != nil && x.TotalBookings != nil {
		return *x.TotalBookings
	}
	return 0
}

type GetReferralTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
	AffiliateId  *int64        `protobuf:"varint,3,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
}

func (x *GetReferralTrendRequest) Reset() {
	*x = GetReferralTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralTrendRequest) ProtoMessage() {}

func (x *GetReferralTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralTrendRequest.ProtoReflect.Descriptor instead.
func (*GetReferralTrendRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{35}
}

func (x *GetReferralTrendRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralTrendRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

func (x *GetReferralTrendRequest) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

// Get the revenue, commission, bookings trend within the period
type GetReferralTrendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta             `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	TimesStats   []*ReferralCoreTimedStats `protobuf:"bytes,2,rep,name=times_stats,json=timesStats,proto3" json:"times_stats,omitempty"`
}

func (x *GetReferralTrendResponse) Reset() {
	*x = GetReferralTrendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralTrendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralTrendResponse) ProtoMessage() {}

func (x *GetReferralTrendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralTrendResponse.ProtoReflect.Descriptor instead.
func (*GetReferralTrendResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{36}
}

func (x *GetReferralTrendResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralTrendResponse) GetTimesStats() []*ReferralCoreTimedStats {
	if x != nil {
		return x.TimesStats
	}
	return nil
}

type ReferralClicks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId        *int64 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	ReferralClickTime *int64 `protobuf:"varint,2,opt,name=referral_click_time,json=referralClickTime,proto3,oneof" json:"referral_click_time,omitempty"`
	ReferralStatus    *int64 `protobuf:"varint,3,opt,name=referral_status,json=referralStatus,proto3,oneof" json:"referral_status,omitempty"`
}

func (x *ReferralClicks) Reset() {
	*x = ReferralClicks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralClicks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralClicks) ProtoMessage() {}

func (x *ReferralClicks) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralClicks.ProtoReflect.Descriptor instead.
func (*ReferralClicks) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{37}
}

func (x *ReferralClicks) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralClicks) GetReferralClickTime() int64 {
	if x != nil && x.ReferralClickTime != nil {
		return *x.ReferralClickTime
	}
	return 0
}

func (x *ReferralClicks) GetReferralStatus() int64 {
	if x != nil && x.ReferralStatus != nil {
		return *x.ReferralStatus
	}
	return 0
}

type ReferralEarnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferralId         *int64 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	BookingTime        *int64 `protobuf:"varint,2,opt,name=booking_time,json=bookingTime,proto3,oneof" json:"booking_time,omitempty"`
	ReferralCommission *int64 `protobuf:"varint,3,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
	BookingRefId       *int64 `protobuf:"varint,4,opt,name=booking_ref_id,json=bookingRefId,proto3,oneof" json:"booking_ref_id,omitempty"`
}

func (x *ReferralEarnings) Reset() {
	*x = ReferralEarnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralEarnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralEarnings) ProtoMessage() {}

func (x *ReferralEarnings) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralEarnings.ProtoReflect.Descriptor instead.
func (*ReferralEarnings) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{38}
}

func (x *ReferralEarnings) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *ReferralEarnings) GetBookingTime() int64 {
	if x != nil && x.BookingTime != nil {
		return *x.BookingTime
	}
	return 0
}

func (x *ReferralEarnings) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

func (x *ReferralEarnings) GetBookingRefId() int64 {
	if x != nil && x.BookingRefId != nil {
		return *x.BookingRefId
	}
	return 0
}

type ReferralRecent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentClicks   []*ReferralClicks   `protobuf:"bytes,1,rep,name=recent_clicks,json=recentClicks,proto3" json:"recent_clicks,omitempty"`
	RecentEarnings []*ReferralEarnings `protobuf:"bytes,2,rep,name=recent_earnings,json=recentEarnings,proto3" json:"recent_earnings,omitempty"`
	StartTime      *int64              `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime        *int64              `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *ReferralRecent) Reset() {
	*x = ReferralRecent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferralRecent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferralRecent) ProtoMessage() {}

func (x *ReferralRecent) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferralRecent.ProtoReflect.Descriptor instead.
func (*ReferralRecent) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{39}
}

func (x *ReferralRecent) GetRecentClicks() []*ReferralClicks {
	if x != nil {
		return x.RecentClicks
	}
	return nil
}

func (x *ReferralRecent) GetRecentEarnings() []*ReferralEarnings {
	if x != nil {
		return x.RecentEarnings
	}
	return nil
}

func (x *ReferralRecent) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ReferralRecent) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

// Admin to view top affiliates
type GetReferralRecentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetReferralRecentListRequest) Reset() {
	*x = GetReferralRecentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralRecentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralRecentListRequest) ProtoMessage() {}

func (x *GetReferralRecentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralRecentListRequest.ProtoReflect.Descriptor instead.
func (*GetReferralRecentListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{40}
}

func (x *GetReferralRecentListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

type GetReferralRecentListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta   *ResponseMeta   `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralRecent *ReferralRecent `protobuf:"bytes,2,opt,name=referral_recent,json=referralRecent,proto3,oneof" json:"referral_recent,omitempty"`
}

func (x *GetReferralRecentListResponse) Reset() {
	*x = GetReferralRecentListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralRecentListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralRecentListResponse) ProtoMessage() {}

func (x *GetReferralRecentListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralRecentListResponse.ProtoReflect.Descriptor instead.
func (*GetReferralRecentListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{41}
}

func (x *GetReferralRecentListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralRecentListResponse) GetReferralRecent() *ReferralRecent {
	if x != nil {
		return x.ReferralRecent
	}
	return nil
}

// Affiliates / Admin  to view list of referrals
type GetReferralListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta   *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector  *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
	AffiliateName *string       `protobuf:"bytes,3,opt,name=affiliate_name,json=affiliateName,proto3,oneof" json:"affiliate_name,omitempty"`
}

func (x *GetReferralListRequest) Reset() {
	*x = GetReferralListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralListRequest) ProtoMessage() {}

func (x *GetReferralListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralListRequest.ProtoReflect.Descriptor instead.
func (*GetReferralListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{42}
}

func (x *GetReferralListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralListRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

func (x *GetReferralListRequest) GetAffiliateName() string {
	if x != nil && x.AffiliateName != nil {
		return *x.AffiliateName
	}
	return ""
}

type GetReferralListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralList []*ReferralBasic `protobuf:"bytes,2,rep,name=referral_list,json=referralList,proto3" json:"referral_list,omitempty"`
	StartTime    *int64           `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime      *int64           `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *GetReferralListResponse) Reset() {
	*x = GetReferralListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralListResponse) ProtoMessage() {}

func (x *GetReferralListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralListResponse.ProtoReflect.Descriptor instead.
func (*GetReferralListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{43}
}

func (x *GetReferralListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralListResponse) GetReferralList() []*ReferralBasic {
	if x != nil {
		return x.ReferralList
	}
	return nil
}

func (x *GetReferralListResponse) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetReferralListResponse) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

// Admin, Affiliates to view details of referrals
type GetReferralDetailsByReferralIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"` //blocks if user id requesting does not own this referral / not admin
	ReferralId  *int64       `protobuf:"varint,2,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
}

func (x *GetReferralDetailsByReferralIdRequest) Reset() {
	*x = GetReferralDetailsByReferralIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralDetailsByReferralIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralDetailsByReferralIdRequest) ProtoMessage() {}

func (x *GetReferralDetailsByReferralIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralDetailsByReferralIdRequest.ProtoReflect.Descriptor instead.
func (*GetReferralDetailsByReferralIdRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{44}
}

func (x *GetReferralDetailsByReferralIdRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetReferralDetailsByReferralIdRequest) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

type GetReferralDetailsByReferralIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta    *ResponseMeta    `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralDetails *ReferralDetails `protobuf:"bytes,2,opt,name=referral_details,json=referralDetails,proto3,oneof" json:"referral_details,omitempty"`
}

func (x *GetReferralDetailsByReferralIdResponse) Reset() {
	*x = GetReferralDetailsByReferralIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReferralDetailsByReferralIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReferralDetailsByReferralIdResponse) ProtoMessage() {}

func (x *GetReferralDetailsByReferralIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReferralDetailsByReferralIdResponse.ProtoReflect.Descriptor instead.
func (*GetReferralDetailsByReferralIdResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{45}
}

func (x *GetReferralDetailsByReferralIdResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetReferralDetailsByReferralIdResponse) GetReferralDetails() *ReferralDetails {
	if x != nil {
		return x.ReferralDetails
	}
	return nil
}

type BookingSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotId      *int64 `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3,oneof" json:"slot_id,omitempty"`
	Slot        *int64 `protobuf:"varint,2,opt,name=slot,proto3,oneof" json:"slot,omitempty"`
	CitizenSlot *int64 `protobuf:"varint,3,opt,name=citizen_slot,json=citizenSlot,proto3,oneof" json:"citizen_slot,omitempty"`
	TouristSlot *int64 `protobuf:"varint,4,opt,name=tourist_slot,json=touristSlot,proto3,oneof" json:"tourist_slot,omitempty"`
}

func (x *BookingSlot) Reset() {
	*x = BookingSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSlot) ProtoMessage() {}

func (x *BookingSlot) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSlot.ProtoReflect.Descriptor instead.
func (*BookingSlot) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{46}
}

func (x *BookingSlot) GetSlotId() int64 {
	if x != nil && x.SlotId != nil {
		return *x.SlotId
	}
	return 0
}

func (x *BookingSlot) GetSlot() int64 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *BookingSlot) GetCitizenSlot() int64 {
	if x != nil && x.CitizenSlot != nil {
		return *x.CitizenSlot
	}
	return 0
}

func (x *BookingSlot) GetTouristSlot() int64 {
	if x != nil && x.TouristSlot != nil {
		return *x.TouristSlot
	}
	return 0
}

type BookingDates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date  *string      `protobuf:"bytes,1,opt,name=date,proto3,oneof" json:"date,omitempty"`
	Slots *BookingSlot `protobuf:"bytes,2,opt,name=slots,proto3,oneof" json:"slots,omitempty"`
}

func (x *BookingDates) Reset() {
	*x = BookingDates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingDates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingDates) ProtoMessage() {}

func (x *BookingDates) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingDates.ProtoReflect.Descriptor instead.
func (*BookingDates) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{47}
}

func (x *BookingDates) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *BookingDates) GetSlots() *BookingSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

type GetAvailableSlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetAvailableSlotRequest) Reset() {
	*x = GetAvailableSlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableSlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableSlotRequest) ProtoMessage() {}

func (x *GetAvailableSlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableSlotRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableSlotRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{48}
}

func (x *GetAvailableSlotRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

// Landing page to get available time slot based on date
type GetAvailableSlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta  `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	Date         *string        `protobuf:"bytes,2,opt,name=date,proto3,oneof" json:"date,omitempty"`
	BookingSlots []*BookingSlot `protobuf:"bytes,3,rep,name=booking_slots,json=bookingSlots,proto3" json:"booking_slots,omitempty"`
}

func (x *GetAvailableSlotResponse) Reset() {
	*x = GetAvailableSlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableSlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableSlotResponse) ProtoMessage() {}

func (x *GetAvailableSlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableSlotResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableSlotResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{49}
}

func (x *GetAvailableSlotResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetAvailableSlotResponse) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *GetAvailableSlotResponse) GetBookingSlots() []*BookingSlot {
	if x != nil {
		return x.BookingSlots
	}
	return nil
}

type GetBookingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta  `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	TimeSelector *TimeSelector `protobuf:"bytes,2,opt,name=time_selector,json=timeSelector,proto3,oneof" json:"time_selector,omitempty"`
}

func (x *GetBookingListRequest) Reset() {
	*x = GetBookingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingListRequest) ProtoMessage() {}

func (x *GetBookingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingListRequest.ProtoReflect.Descriptor instead.
func (*GetBookingListRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{50}
}

func (x *GetBookingListRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *GetBookingListRequest) GetTimeSelector() *TimeSelector {
	if x != nil {
		return x.TimeSelector
	}
	return nil
}

type GetBookingListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta   `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	Bookings     []*BookingBasic `protobuf:"bytes,2,rep,name=bookings,proto3" json:"bookings,omitempty"`
	StartTime    *int64          `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime      *int64          `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *GetBookingListResponse) Reset() {
	*x = GetBookingListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBookingListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingListResponse) ProtoMessage() {}

func (x *GetBookingListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingListResponse.ProtoReflect.Descriptor instead.
func (*GetBookingListResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{51}
}

func (x *GetBookingListResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetBookingListResponse) GetBookings() []*BookingBasic {
	if x != nil {
		return x.Bookings
	}
	return nil
}

func (x *GetBookingListResponse) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *GetBookingListResponse) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

type TrackClickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ReferralId   *int64        `protobuf:"varint,2,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
}

func (x *TrackClickResponse) Reset() {
	*x = TrackClickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackClickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackClickResponse) ProtoMessage() {}

func (x *TrackClickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackClickResponse.ProtoReflect.Descriptor instead.
func (*TrackClickResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{52}
}

func (x *TrackClickResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *TrackClickResponse) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{53}
}

func (x *GetUserInfoRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta  *ResponseMeta         `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AffiliateMeta *AffiliateProfileMeta `protobuf:"bytes,2,opt,name=affiliate_meta,json=affiliateMeta,proto3,oneof" json:"affiliate_meta,omitempty"`
	UserInfo      *User                 `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3,oneof" json:"user_info,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{54}
}

func (x *GetUserInfoResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *GetUserInfoResponse) GetAffiliateMeta() *AffiliateProfileMeta {
	if x != nil {
		return x.AffiliateMeta
	}
	return nil
}

func (x *GetUserInfoResponse) GetUserInfo() *User {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

type UserAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserPassword *string `protobuf:"bytes,2,opt,name=user_password,json=userPassword,proto3,oneof" json:"user_password,omitempty"`
}

func (x *UserAuth) Reset() {
	*x = UserAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuth) ProtoMessage() {}

func (x *UserAuth) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuth.ProtoReflect.Descriptor instead.
func (*UserAuth) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{55}
}

func (x *UserAuth) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserAuth) GetUserPassword() string {
	if x != nil && x.UserPassword != nil {
		return *x.UserPassword
	}
	return ""
}

type UserRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta           *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	EntityName            *string      `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3,oneof" json:"entity_name,omitempty"`
	EntityIdentifier      *string      `protobuf:"bytes,3,opt,name=entity_identifier,json=entityIdentifier,proto3,oneof" json:"entity_identifier,omitempty"`
	UserName              *string      `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	UserPassword          *string      `protobuf:"bytes,5,opt,name=user_password,json=userPassword,proto3,oneof" json:"user_password,omitempty"`
	UserEmail             *string      `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3,oneof" json:"user_email,omitempty"`
	UserContact           *string      `protobuf:"bytes,7,opt,name=user_contact,json=userContact,proto3,oneof" json:"user_contact,omitempty"`
	AffiliateType         *int64       `protobuf:"varint,8,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	PreferredReferralCode *string      `protobuf:"bytes,9,opt,name=preferred_referral_code,json=preferredReferralCode,proto3,oneof" json:"preferred_referral_code,omitempty"`
}

func (x *UserRegistrationRequest) Reset() {
	*x = UserRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationRequest) ProtoMessage() {}

func (x *UserRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationRequest.ProtoReflect.Descriptor instead.
func (*UserRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{56}
}

func (x *UserRegistrationRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *UserRegistrationRequest) GetEntityName() string {
	if x != nil && x.EntityName != nil {
		return *x.EntityName
	}
	return ""
}

func (x *UserRegistrationRequest) GetEntityIdentifier() string {
	if x != nil && x.EntityIdentifier != nil {
		return *x.EntityIdentifier
	}
	return ""
}

func (x *UserRegistrationRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UserRegistrationRequest) GetUserPassword() string {
	if x != nil && x.UserPassword != nil {
		return *x.UserPassword
	}
	return ""
}

func (x *UserRegistrationRequest) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

func (x *UserRegistrationRequest) GetUserContact() string {
	if x != nil && x.UserContact != nil {
		return *x.UserContact
	}
	return ""
}

func (x *UserRegistrationRequest) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *UserRegistrationRequest) GetPreferredReferralCode() string {
	if x != nil && x.PreferredReferralCode != nil {
		return *x.PreferredReferralCode
	}
	return ""
}

type UserRegistrationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *UserRegistrationResponse) Reset() {
	*x = UserRegistrationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRegistrationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationResponse) ProtoMessage() {}

func (x *UserRegistrationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationResponse.ProtoReflect.Descriptor instead.
func (*UserRegistrationResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{57}
}

func (x *UserRegistrationResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type UserAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta  *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	UserName     *string      `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	UserPassword *string      `protobuf:"bytes,3,opt,name=user_password,json=userPassword,proto3,oneof" json:"user_password,omitempty"`
}

func (x *UserAuthenticationRequest) Reset() {
	*x = UserAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationRequest) ProtoMessage() {}

func (x *UserAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*UserAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{58}
}

func (x *UserAuthenticationRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *UserAuthenticationRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UserAuthenticationRequest) GetUserPassword() string {
	if x != nil && x.UserPassword != nil {
		return *x.UserPassword
	}
	return ""
}

type Tokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken  *string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
	RefreshToken *string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3,oneof" json:"refresh_token,omitempty"`
}

func (x *Tokens) Reset() {
	*x = Tokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tokens) ProtoMessage() {}

func (x *Tokens) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tokens.ProtoReflect.Descriptor instead.
func (*Tokens) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{59}
}

func (x *Tokens) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *Tokens) GetRefreshToken() string {
	if x != nil && x.RefreshToken != nil {
		return *x.RefreshToken
	}
	return ""
}

type AuthCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserName  *string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	UserEmail *string `protobuf:"bytes,3,opt,name=user_email,json=userEmail,proto3,oneof" json:"user_email,omitempty"`
	UserRole  *int64  `protobuf:"varint,4,opt,name=user_role,json=userRole,proto3,oneof" json:"user_role,omitempty"`
	Tokens    *Tokens `protobuf:"bytes,5,opt,name=tokens,proto3,oneof" json:"tokens,omitempty"`
}

func (x *AuthCookie) Reset() {
	*x = AuthCookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthCookie) ProtoMessage() {}

func (x *AuthCookie) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthCookie.ProtoReflect.Descriptor instead.
func (*AuthCookie) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{60}
}

func (x *AuthCookie) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *AuthCookie) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AuthCookie) GetUserEmail() string {
	if x != nil && x.UserEmail != nil {
		return *x.UserEmail
	}
	return ""
}

func (x *AuthCookie) GetUserRole() int64 {
	if x != nil && x.UserRole != nil {
		return *x.UserRole
	}
	return 0
}

func (x *AuthCookie) GetTokens() *Tokens {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type UserAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	AuthCookie   *AuthCookie   `protobuf:"bytes,2,opt,name=auth_cookie,json=authCookie,proto3,oneof" json:"auth_cookie,omitempty"`
}

func (x *UserAuthenticationResponse) Reset() {
	*x = UserAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAuthenticationResponse) ProtoMessage() {}

func (x *UserAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*UserAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{61}
}

func (x *UserAuthenticationResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *UserAuthenticationResponse) GetAuthCookie() *AuthCookie {
	if x != nil {
		return x.AuthCookie
	}
	return nil
}

type AffiliateProfileMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffiliateId        *int64  `protobuf:"varint,1,opt,name=affiliate_id,json=affiliateId,proto3,oneof" json:"affiliate_id,omitempty"`
	EntityName         *string `protobuf:"bytes,2,opt,name=entity_name,json=entityName,proto3,oneof" json:"entity_name,omitempty"`
	EntityIdentifier   *string `protobuf:"bytes,3,opt,name=entity_identifier,json=entityIdentifier,proto3,oneof" json:"entity_identifier,omitempty"`
	AffiliateType      *int64  `protobuf:"varint,4,opt,name=affiliate_type,json=affiliateType,proto3,oneof" json:"affiliate_type,omitempty"`
	UniqueReferralCode *string `protobuf:"bytes,5,opt,name=unique_referral_code,json=uniqueReferralCode,proto3,oneof" json:"unique_referral_code,omitempty"`
	ReferralCount      *int64  `protobuf:"varint,6,opt,name=referral_count,json=referralCount,proto3,oneof" json:"referral_count,omitempty"`
	ReferralClicks     *int64  `protobuf:"varint,7,opt,name=referral_clicks,json=referralClicks,proto3,oneof" json:"referral_clicks,omitempty"`
	ReferralCommission *int64  `protobuf:"varint,8,opt,name=referral_commission,json=referralCommission,proto3,oneof" json:"referral_commission,omitempty"`
	TotalRevenue       *int64  `protobuf:"varint,9,opt,name=total_revenue,json=totalRevenue,proto3,oneof" json:"total_revenue,omitempty"`
}

func (x *AffiliateProfileMeta) Reset() {
	*x = AffiliateProfileMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AffiliateProfileMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffiliateProfileMeta) ProtoMessage() {}

func (x *AffiliateProfileMeta) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffiliateProfileMeta.ProtoReflect.Descriptor instead.
func (*AffiliateProfileMeta) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{62}
}

func (x *AffiliateProfileMeta) GetAffiliateId() int64 {
	if x != nil && x.AffiliateId != nil {
		return *x.AffiliateId
	}
	return 0
}

func (x *AffiliateProfileMeta) GetEntityName() string {
	if x != nil && x.EntityName != nil {
		return *x.EntityName
	}
	return ""
}

func (x *AffiliateProfileMeta) GetEntityIdentifier() string {
	if x != nil && x.EntityIdentifier != nil {
		return *x.EntityIdentifier
	}
	return ""
}

func (x *AffiliateProfileMeta) GetAffiliateType() int64 {
	if x != nil && x.AffiliateType != nil {
		return *x.AffiliateType
	}
	return 0
}

func (x *AffiliateProfileMeta) GetUniqueReferralCode() string {
	if x != nil && x.UniqueReferralCode != nil {
		return *x.UniqueReferralCode
	}
	return ""
}

func (x *AffiliateProfileMeta) GetReferralCount() int64 {
	if x != nil && x.ReferralCount != nil {
		return *x.ReferralCount
	}
	return 0
}

func (x *AffiliateProfileMeta) GetReferralClicks() int64 {
	if x != nil && x.ReferralClicks != nil {
		return *x.ReferralClicks
	}
	return 0
}

func (x *AffiliateProfileMeta) GetReferralCommission() int64 {
	if x != nil && x.ReferralCommission != nil {
		return *x.ReferralCommission
	}
	return 0
}

func (x *AffiliateProfileMeta) GetTotalRevenue() int64 {
	if x != nil && x.TotalRevenue != nil {
		return *x.TotalRevenue
	}
	return 0
}

type CheckOutTickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CitizenTicketCount *int64 `protobuf:"varint,1,opt,name=citizen_ticket_count,json=citizenTicketCount,proto3,oneof" json:"citizen_ticket_count,omitempty"`
	TouristTicketCount *int64 `protobuf:"varint,2,opt,name=tourist_ticket_count,json=touristTicketCount,proto3,oneof" json:"tourist_ticket_count,omitempty"`
}

func (x *CheckOutTickets) Reset() {
	*x = CheckOutTickets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOutTickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOutTickets) ProtoMessage() {}

func (x *CheckOutTickets) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOutTickets.ProtoReflect.Descriptor instead.
func (*CheckOutTickets) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{63}
}

func (x *CheckOutTickets) GetCitizenTicketCount() int64 {
	if x != nil && x.CitizenTicketCount != nil {
		return *x.CitizenTicketCount
	}
	return 0
}

func (x *CheckOutTickets) GetTouristTicketCount() int64 {
	if x != nil && x.TouristTicketCount != nil {
		return *x.TouristTicketCount
	}
	return 0
}

type CreatePaymentIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta     `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	Tickets     *CheckOutTickets `protobuf:"bytes,2,opt,name=tickets,proto3,oneof" json:"tickets,omitempty"`
}

func (x *CreatePaymentIntentRequest) Reset() {
	*x = CreatePaymentIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentIntentRequest) ProtoMessage() {}

func (x *CreatePaymentIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentIntentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentIntentRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{64}
}

func (x *CreatePaymentIntentRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *CreatePaymentIntentRequest) GetTickets() *CheckOutTickets {
	if x != nil {
		return x.Tickets
	}
	return nil
}

type CreatePaymentIntentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	ClientSecret *string       `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3,oneof" json:"client_secret,omitempty"`
}

func (x *CreatePaymentIntentResponse) Reset() {
	*x = CreatePaymentIntentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentIntentResponse) ProtoMessage() {}

func (x *CreatePaymentIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentIntentResponse.ProtoReflect.Descriptor instead.
func (*CreatePaymentIntentResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{65}
}

func (x *CreatePaymentIntentResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *CreatePaymentIntentResponse) GetClientSecret() string {
	if x != nil && x.ClientSecret != nil {
		return *x.ClientSecret
	}
	return ""
}

type TrackCheckOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta *RequestMeta `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	ReferralId  *int64       `protobuf:"varint,2,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	BookingId   *int64       `protobuf:"varint,3,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
}

func (x *TrackCheckOutRequest) Reset() {
	*x = TrackCheckOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackCheckOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackCheckOutRequest) ProtoMessage() {}

func (x *TrackCheckOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackCheckOutRequest.ProtoReflect.Descriptor instead.
func (*TrackCheckOutRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{66}
}

func (x *TrackCheckOutRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *TrackCheckOutRequest) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *TrackCheckOutRequest) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

type TrackCheckOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta   *ResponseMeta   `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	BookingDetails *BookingDetails `protobuf:"bytes,2,opt,name=booking_details,json=bookingDetails,proto3,oneof" json:"booking_details,omitempty"`
}

func (x *TrackCheckOutResponse) Reset() {
	*x = TrackCheckOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackCheckOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackCheckOutResponse) ProtoMessage() {}

func (x *TrackCheckOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackCheckOutResponse.ProtoReflect.Descriptor instead.
func (*TrackCheckOutResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{67}
}

func (x *TrackCheckOutResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *TrackCheckOutResponse) GetBookingDetails() *BookingDetails {
	if x != nil {
		return x.BookingDetails
	}
	return nil
}

type UserDeAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
}

func (x *UserDeAuthenticationResponse) Reset() {
	*x = UserDeAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeAuthenticationResponse) ProtoMessage() {}

func (x *UserDeAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*UserDeAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{68}
}

func (x *UserDeAuthenticationResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

type TrackPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMeta        *RequestMeta    `protobuf:"bytes,1,opt,name=request_meta,json=requestMeta,proto3,oneof" json:"request_meta,omitempty"`
	ReferralId         *int64          `protobuf:"varint,2,opt,name=referral_id,json=referralId,proto3,oneof" json:"referral_id,omitempty"`
	BookingDay         *string         `protobuf:"bytes,3,opt,name=booking_day,json=bookingDay,proto3,oneof" json:"booking_day,omitempty"`
	BookingSlot        *int64          `protobuf:"varint,4,opt,name=booking_slot,json=bookingSlot,proto3,oneof" json:"booking_slot,omitempty"`
	CitizenTicketCount *int64          `protobuf:"varint,5,opt,name=citizen_ticket_count,json=citizenTicketCount,proto3,oneof" json:"citizen_ticket_count,omitempty"`
	TouristTicketCount *int64          `protobuf:"varint,6,opt,name=tourist_ticket_count,json=touristTicketCount,proto3,oneof" json:"tourist_ticket_count,omitempty"`
	CustomerInfo       []*CustomerInfo `protobuf:"bytes,7,rep,name=customer_info,json=customerInfo,proto3" json:"customer_info,omitempty"`
}

func (x *TrackPaymentRequest) Reset() {
	*x = TrackPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPaymentRequest) ProtoMessage() {}

func (x *TrackPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPaymentRequest.ProtoReflect.Descriptor instead.
func (*TrackPaymentRequest) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{69}
}

func (x *TrackPaymentRequest) GetRequestMeta() *RequestMeta {
	if x != nil {
		return x.RequestMeta
	}
	return nil
}

func (x *TrackPaymentRequest) GetReferralId() int64 {
	if x != nil && x.ReferralId != nil {
		return *x.ReferralId
	}
	return 0
}

func (x *TrackPaymentRequest) GetBookingDay() string {
	if x != nil && x.BookingDay != nil {
		return *x.BookingDay
	}
	return ""
}

func (x *TrackPaymentRequest) GetBookingSlot() int64 {
	if x != nil && x.BookingSlot != nil {
		return *x.BookingSlot
	}
	return 0
}

func (x *TrackPaymentRequest) GetCitizenTicketCount() int64 {
	if x != nil && x.CitizenTicketCount != nil {
		return *x.CitizenTicketCount
	}
	return 0
}

func (x *TrackPaymentRequest) GetTouristTicketCount() int64 {
	if x != nil && x.TouristTicketCount != nil {
		return *x.TouristTicketCount
	}
	return 0
}

func (x *TrackPaymentRequest) GetCustomerInfo() []*CustomerInfo {
	if x != nil {
		return x.CustomerInfo
	}
	return nil
}

type TrackPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseMeta *ResponseMeta `protobuf:"bytes,1,opt,name=response_meta,json=responseMeta,proto3,oneof" json:"response_meta,omitempty"`
	BookingId    *int64        `protobuf:"varint,2,opt,name=booking_id,json=bookingId,proto3,oneof" json:"booking_id,omitempty"`
}

func (x *TrackPaymentResponse) Reset() {
	*x = TrackPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_affiliate_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPaymentResponse) ProtoMessage() {}

func (x *TrackPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_affiliate_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPaymentResponse.ProtoReflect.Descriptor instead.
func (*TrackPaymentResponse) Descriptor() ([]byte, []int) {
	return file_affiliate_proto_rawDescGZIP(), []int{70}
}

func (x *TrackPaymentResponse) GetResponseMeta() *ResponseMeta {
	if x != nil {
		return x.ResponseMeta
	}
	return nil
}

func (x *TrackPaymentResponse) GetBookingId() int64 {
	if x != nil && x.BookingId != nil {
		return *x.BookingId
	}
	return 0
}

var File_affiliate_proto protoreflect.FileDescriptor

var file_affiliate_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x22,
	0x40, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x71, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x22, 0x69, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xc1, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xcb, 0x02, 0x0a, 0x12, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x62, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa1, 0x04, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x07, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0xc4, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x44, 0x62, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x05, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x03, 0x0a,
	0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x11, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x05, 0x52, 0x0e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xef, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xba, 0x02, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf3,
	0x05, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x44, 0x62, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x12, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x07, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x12, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x0a, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x04, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52,
	0x12, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f,
	0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xf6, 0x05, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x12, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x12,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb8, 0x03, 0x0a,
	0x1a, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x17, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x03, 0x0a, 0x18, 0x41, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x16, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x12, 0x41,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x12, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0e,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x10, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x1b, 0x74, 0x6f, 0x70, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x6f, 0x70, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x18, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x6b, 0x0a, 0x1d, 0x74, 0x6f, 0x70, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x74, 0x6f, 0x70, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a,
	0x0c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x54, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x54, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xde, 0x02, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x1e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x48, 0x02, 0x52, 0x1b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x74, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x22, 0xe1, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x11, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x01, 0x52, 0x10, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0xe9, 0x03, 0x0a, 0x17, 0x41, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x63, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xbb, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xf0, 0x02, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xfe, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xd5, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a,
	0x1d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x48, 0x02, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x16, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x63, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x63, 0x69, 0x74, 0x69,
	0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x11, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x02, 0x0a,
	0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x12,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52,
	0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x64, 0x22, 0xfc, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c,
	0x69, 0x63, 0x6b, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xd7, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x48, 0x01,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x93, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66,
	0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1c, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x0b, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x70,
	0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x48, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x22, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22,
	0xd4, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x08, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x94, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x01, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x02, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x70, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xdb, 0x04, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x15, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a,
	0x18, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x7d, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87,
	0x02, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x04, 0x52, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1a, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x48, 0x01, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22,
	0xe7, 0x04, 0x0a, 0x14, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x07, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x08, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x35, 0x0a,
	0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x12, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x01,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48,
	0x01, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xd3,
	0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x01, 0x52, 0x0e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x76, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xef,
	0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x12, 0x63,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x6f, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa1, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x2a, 0xc7, 0x03, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0xe8, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0xe9, 0x07, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x53, 0x10, 0xea, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0xeb, 0x07, 0x12, 0x19, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52,
	0x53, 0x48, 0x41, 0x4c, 0x10, 0xec, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0xed, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xee, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xef,
	0x07, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xf0, 0x07, 0x12,
	0x1d, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xf1, 0x07, 0x12, 0x1f,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xf2, 0x07, 0x12,
	0x15, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0xf3, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x53, 0x45, 0x44, 0x10, 0xf4,
	0x07, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0xf5, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xf6, 0x07, 0x12,
	0x16, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xf7, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0xf8, 0x07, 0x2a, 0x3c,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x0d,
	0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x2a, 0x85, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x52, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x80, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x7f, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x3e, 0x0a, 0x0a,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x49, 0x5a, 0x45,
	0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x52, 0x49, 0x53, 0x54, 0x10, 0x01, 0x2a, 0x72, 0x0a, 0x0a,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c,
	0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x47, 0x49, 0x5f, 0x31, 0x30, 0x33, 0x30, 0x5f, 0x31, 0x32,
	0x30, 0x30, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x52,
	0x47, 0x49, 0x5f, 0x31, 0x32, 0x33, 0x30, 0x5f, 0x31, 0x34, 0x30, 0x30, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x47, 0x53, 0x5f, 0x31, 0x34, 0x33, 0x30,
	0x5f, 0x31, 0x36, 0x30, 0x30, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x44, 0x4f, 0x47, 0x53, 0x5f, 0x31, 0x37, 0x30, 0x30, 0x5f, 0x31, 0x38, 0x33, 0x30, 0x10, 0x03,
	0x2a, 0x9b, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44,
	0x41, 0x59, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x38, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x06, 0x42, 0x0c,
	0x5a, 0x0a, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_affiliate_proto_rawDescOnce sync.Once
	file_affiliate_proto_rawDescData = file_affiliate_proto_rawDesc
)

func file_affiliate_proto_rawDescGZIP() []byte {
	file_affiliate_proto_rawDescOnce.Do(func() {
		file_affiliate_proto_rawDescData = protoimpl.X.CompressGZIP(file_affiliate_proto_rawDescData)
	})
	return file_affiliate_proto_rawDescData
}

var file_affiliate_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_affiliate_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_affiliate_proto_goTypes = []interface{}{
	(GlobalErrorCode)(0),                           // 0: affiliate.pb.GlobalErrorCode
	(UserRole)(0),                                  // 1: affiliate.pb.UserRole
	(AffiliateType)(0),                             // 2: affiliate.pb.AffiliateType
	(ReferralStatus)(0),                            // 3: affiliate.pb.ReferralStatus
	(BookingStatus)(0),                             // 4: affiliate.pb.BookingStatus
	(PaymentStatus)(0),                             // 5: affiliate.pb.PaymentStatus
	(TicketType)(0),                                // 6: affiliate.pb.TicketType
	(TicketSlot)(0),                                // 7: affiliate.pb.TicketSlot
	(TimeSelectorPeriod)(0),                        // 8: affiliate.pb.TimeSelectorPeriod
	(*RequestMeta)(nil),                            // 9: affiliate.pb.RequestMeta
	(*ResponseMeta)(nil),                           // 10: affiliate.pb.ResponseMeta
	(*GenericResponse)(nil),                        // 11: affiliate.pb.GenericResponse
	(*User)(nil),                                   // 12: affiliate.pb.User
	(*AffiliateDetailsDb)(nil),                     // 13: affiliate.pb.AffiliateDetailsDb
	(*AffiliateMeta)(nil),                          // 14: affiliate.pb.AffiliateMeta
	(*ReferralDb)(nil),                             // 15: affiliate.pb.ReferralDb
	(*ReferralDetails)(nil),                        // 16: affiliate.pb.ReferralDetails
	(*ReferralBasic)(nil),                          // 17: affiliate.pb.ReferralBasic
	(*CustomerInfo)(nil),                           // 18: affiliate.pb.CustomerInfo
	(*BookingDetailsDb)(nil),                       // 19: affiliate.pb.BookingDetailsDb
	(*BookingBasic)(nil),                           // 20: affiliate.pb.BookingBasic
	(*BookingDetails)(nil),                         // 21: affiliate.pb.BookingDetails
	(*AffiliateMetaTopCommission)(nil),             // 22: affiliate.pb.AffiliateMetaTopCommission
	(*AffiliateMetaTopReferral)(nil),               // 23: affiliate.pb.AffiliateMetaTopReferral
	(*AffiliateCoreStats)(nil),                     // 24: affiliate.pb.AffiliateCoreStats
	(*AffiliateStats)(nil),                         // 25: affiliate.pb.AffiliateStats
	(*AffiliateRanking)(nil),                       // 26: affiliate.pb.AffiliateRanking
	(*TimeSelector)(nil),                           // 27: affiliate.pb.TimeSelector
	(*GetAffiliateStatsRequest)(nil),               // 28: affiliate.pb.GetAffiliateStatsRequest
	(*GetAffiliateStatsResponse)(nil),              // 29: affiliate.pb.GetAffiliateStatsResponse
	(*GetAffiliateRankingListRequest)(nil),         // 30: affiliate.pb.GetAffiliateRankingListRequest
	(*GetAffiliateRankingListResponse)(nil),        // 31: affiliate.pb.GetAffiliateRankingListResponse
	(*AffiliateCoreTimedStats)(nil),                // 32: affiliate.pb.AffiliateCoreTimedStats
	(*GetAffiliateTrendRequest)(nil),               // 33: affiliate.pb.GetAffiliateTrendRequest
	(*GetAffiliateTrendResponse)(nil),              // 34: affiliate.pb.GetAffiliateTrendResponse
	(*GetAffiliateListRequest)(nil),                // 35: affiliate.pb.GetAffiliateListRequest
	(*GetAffiliateListResponse)(nil),               // 36: affiliate.pb.GetAffiliateListResponse
	(*GetAffiliateDetailsByIdRequest)(nil),         // 37: affiliate.pb.GetAffiliateDetailsByIdRequest
	(*GetAffiliateDetailsByIdResponse)(nil),        // 38: affiliate.pb.GetAffiliateDetailsByIdResponse
	(*ReferralCoreStats)(nil),                      // 39: affiliate.pb.ReferralCoreStats
	(*ReferralStats)(nil),                          // 40: affiliate.pb.ReferralStats
	(*GetReferralStatsRequest)(nil),                // 41: affiliate.pb.GetReferralStatsRequest
	(*GetReferralStatsResponse)(nil),               // 42: affiliate.pb.GetReferralStatsResponse
	(*ReferralCoreTimedStats)(nil),                 // 43: affiliate.pb.ReferralCoreTimedStats
	(*GetReferralTrendRequest)(nil),                // 44: affiliate.pb.GetReferralTrendRequest
	(*GetReferralTrendResponse)(nil),               // 45: affiliate.pb.GetReferralTrendResponse
	(*ReferralClicks)(nil),                         // 46: affiliate.pb.ReferralClicks
	(*ReferralEarnings)(nil),                       // 47: affiliate.pb.ReferralEarnings
	(*ReferralRecent)(nil),                         // 48: affiliate.pb.ReferralRecent
	(*GetReferralRecentListRequest)(nil),           // 49: affiliate.pb.GetReferralRecentListRequest
	(*GetReferralRecentListResponse)(nil),          // 50: affiliate.pb.GetReferralRecentListResponse
	(*GetReferralListRequest)(nil),                 // 51: affiliate.pb.GetReferralListRequest
	(*GetReferralListResponse)(nil),                // 52: affiliate.pb.GetReferralListResponse
	(*GetReferralDetailsByReferralIdRequest)(nil),  // 53: affiliate.pb.GetReferralDetailsByReferralIdRequest
	(*GetReferralDetailsByReferralIdResponse)(nil), // 54: affiliate.pb.GetReferralDetailsByReferralIdResponse
	(*BookingSlot)(nil),                            // 55: affiliate.pb.BookingSlot
	(*BookingDates)(nil),                           // 56: affiliate.pb.BookingDates
	(*GetAvailableSlotRequest)(nil),                // 57: affiliate.pb.GetAvailableSlotRequest
	(*GetAvailableSlotResponse)(nil),               // 58: affiliate.pb.GetAvailableSlotResponse
	(*GetBookingListRequest)(nil),                  // 59: affiliate.pb.GetBookingListRequest
	(*GetBookingListResponse)(nil),                 // 60: affiliate.pb.GetBookingListResponse
	(*TrackClickResponse)(nil),                     // 61: affiliate.pb.TrackClickResponse
	(*GetUserInfoRequest)(nil),                     // 62: affiliate.pb.GetUserInfoRequest
	(*GetUserInfoResponse)(nil),                    // 63: affiliate.pb.GetUserInfoResponse
	(*UserAuth)(nil),                               // 64: affiliate.pb.UserAuth
	(*UserRegistrationRequest)(nil),                // 65: affiliate.pb.UserRegistrationRequest
	(*UserRegistrationResponse)(nil),               // 66: affiliate.pb.UserRegistrationResponse
	(*UserAuthenticationRequest)(nil),              // 67: affiliate.pb.UserAuthenticationRequest
	(*Tokens)(nil),                                 // 68: affiliate.pb.Tokens
	(*AuthCookie)(nil),                             // 69: affiliate.pb.AuthCookie
	(*UserAuthenticationResponse)(nil),             // 70: affiliate.pb.UserAuthenticationResponse
	(*AffiliateProfileMeta)(nil),                   // 71: affiliate.pb.AffiliateProfileMeta
	(*CheckOutTickets)(nil),                        // 72: affiliate.pb.CheckOutTickets
	(*CreatePaymentIntentRequest)(nil),             // 73: affiliate.pb.CreatePaymentIntentRequest
	(*CreatePaymentIntentResponse)(nil),            // 74: affiliate.pb.CreatePaymentIntentResponse
	(*TrackCheckOutRequest)(nil),                   // 75: affiliate.pb.TrackCheckOutRequest
	(*TrackCheckOutResponse)(nil),                  // 76: affiliate.pb.TrackCheckOutResponse
	(*UserDeAuthenticationResponse)(nil),           // 77: affiliate.pb.UserDeAuthenticationResponse
	(*TrackPaymentRequest)(nil),                    // 78: affiliate.pb.TrackPaymentRequest
	(*TrackPaymentResponse)(nil),                   // 79: affiliate.pb.TrackPaymentResponse
}
var file_affiliate_proto_depIdxs = []int32{
	10, // 0: affiliate.pb.GenericResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	21, // 1: affiliate.pb.ReferralDetails.booking_details:type_name -> affiliate.pb.BookingDetails
	18, // 2: affiliate.pb.BookingDetails.customer_info:type_name -> affiliate.pb.CustomerInfo
	24, // 3: affiliate.pb.AffiliateStats.core_stats:type_name -> affiliate.pb.AffiliateCoreStats
	23, // 4: affiliate.pb.AffiliateRanking.top_affiliate_referral_list:type_name -> affiliate.pb.AffiliateMetaTopReferral
	22, // 5: affiliate.pb.AffiliateRanking.top_affiliate_commission_list:type_name -> affiliate.pb.AffiliateMetaTopCommission
	9,  // 6: affiliate.pb.GetAffiliateStatsRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 7: affiliate.pb.GetAffiliateStatsRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 8: affiliate.pb.GetAffiliateStatsResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	25, // 9: affiliate.pb.GetAffiliateStatsResponse.affiliate_stats:type_name -> affiliate.pb.AffiliateStats
	25, // 10: affiliate.pb.GetAffiliateStatsResponse.affiliate_stats_previous_cycle:type_name -> affiliate.pb.AffiliateStats
	9,  // 11: affiliate.pb.GetAffiliateRankingListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 12: affiliate.pb.GetAffiliateRankingListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	26, // 13: affiliate.pb.GetAffiliateRankingListResponse.affiliate_ranking:type_name -> affiliate.pb.AffiliateRanking
	9,  // 14: affiliate.pb.GetAffiliateTrendRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 15: affiliate.pb.GetAffiliateTrendRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 16: affiliate.pb.GetAffiliateTrendResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	32, // 17: affiliate.pb.GetAffiliateTrendResponse.times_stats:type_name -> affiliate.pb.AffiliateCoreTimedStats
	9,  // 18: affiliate.pb.GetAffiliateListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 19: affiliate.pb.GetAffiliateListRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 20: affiliate.pb.GetAffiliateListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	14, // 21: affiliate.pb.GetAffiliateListResponse.affiliate_list:type_name -> affiliate.pb.AffiliateMeta
	9,  // 22: affiliate.pb.GetAffiliateDetailsByIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 23: affiliate.pb.GetAffiliateDetailsByIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	14, // 24: affiliate.pb.GetAffiliateDetailsByIdResponse.affiliate_meta:type_name -> affiliate.pb.AffiliateMeta
	16, // 25: affiliate.pb.GetAffiliateDetailsByIdResponse.referral_list:type_name -> affiliate.pb.ReferralDetails
	39, // 26: affiliate.pb.ReferralStats.core_stats:type_name -> affiliate.pb.ReferralCoreStats
	9,  // 27: affiliate.pb.GetReferralStatsRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 28: affiliate.pb.GetReferralStatsRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 29: affiliate.pb.GetReferralStatsResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	40, // 30: affiliate.pb.GetReferralStatsResponse.referral_stats:type_name -> affiliate.pb.ReferralStats
	40, // 31: affiliate.pb.GetReferralStatsResponse.referral_stats_previous_cycle:type_name -> affiliate.pb.ReferralStats
	9,  // 32: affiliate.pb.GetReferralTrendRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 33: affiliate.pb.GetReferralTrendRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 34: affiliate.pb.GetReferralTrendResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	43, // 35: affiliate.pb.GetReferralTrendResponse.times_stats:type_name -> affiliate.pb.ReferralCoreTimedStats
	46, // 36: affiliate.pb.ReferralRecent.recent_clicks:type_name -> affiliate.pb.ReferralClicks
	47, // 37: affiliate.pb.ReferralRecent.recent_earnings:type_name -> affiliate.pb.ReferralEarnings
	9,  // 38: affiliate.pb.GetReferralRecentListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 39: affiliate.pb.GetReferralRecentListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	48, // 40: affiliate.pb.GetReferralRecentListResponse.referral_recent:type_name -> affiliate.pb.ReferralRecent
	9,  // 41: affiliate.pb.GetReferralListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 42: affiliate.pb.GetReferralListRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 43: affiliate.pb.GetReferralListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	17, // 44: affiliate.pb.GetReferralListResponse.referral_list:type_name -> affiliate.pb.ReferralBasic
	9,  // 45: affiliate.pb.GetReferralDetailsByReferralIdRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 46: affiliate.pb.GetReferralDetailsByReferralIdResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	16, // 47: affiliate.pb.GetReferralDetailsByReferralIdResponse.referral_details:type_name -> affiliate.pb.ReferralDetails
	55, // 48: affiliate.pb.BookingDates.slots:type_name -> affiliate.pb.BookingSlot
	9,  // 49: affiliate.pb.GetAvailableSlotRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 50: affiliate.pb.GetAvailableSlotResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	55, // 51: affiliate.pb.GetAvailableSlotResponse.booking_slots:type_name -> affiliate.pb.BookingSlot
	9,  // 52: affiliate.pb.GetBookingListRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	27, // 53: affiliate.pb.GetBookingListRequest.time_selector:type_name -> affiliate.pb.TimeSelector
	10, // 54: affiliate.pb.GetBookingListResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	20, // 55: affiliate.pb.GetBookingListResponse.bookings:type_name -> affiliate.pb.BookingBasic
	10, // 56: affiliate.pb.TrackClickResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	9,  // 57: affiliate.pb.GetUserInfoRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 58: affiliate.pb.GetUserInfoResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	71, // 59: affiliate.pb.GetUserInfoResponse.affiliate_meta:type_name -> affiliate.pb.AffiliateProfileMeta
	12, // 60: affiliate.pb.GetUserInfoResponse.user_info:type_name -> affiliate.pb.User
	9,  // 61: affiliate.pb.UserRegistrationRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 62: affiliate.pb.UserRegistrationResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	9,  // 63: affiliate.pb.UserAuthenticationRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	68, // 64: affiliate.pb.AuthCookie.tokens:type_name -> affiliate.pb.Tokens
	10, // 65: affiliate.pb.UserAuthenticationResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	69, // 66: affiliate.pb.UserAuthenticationResponse.auth_cookie:type_name -> affiliate.pb.AuthCookie
	9,  // 67: affiliate.pb.CreatePaymentIntentRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	72, // 68: affiliate.pb.CreatePaymentIntentRequest.tickets:type_name -> affiliate.pb.CheckOutTickets
	10, // 69: affiliate.pb.CreatePaymentIntentResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	9,  // 70: affiliate.pb.TrackCheckOutRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	10, // 71: affiliate.pb.TrackCheckOutResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	21, // 72: affiliate.pb.TrackCheckOutResponse.booking_details:type_name -> affiliate.pb.BookingDetails
	10, // 73: affiliate.pb.UserDeAuthenticationResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	9,  // 74: affiliate.pb.TrackPaymentRequest.request_meta:type_name -> affiliate.pb.RequestMeta
	18, // 75: affiliate.pb.TrackPaymentRequest.customer_info:type_name -> affiliate.pb.CustomerInfo
	10, // 76: affiliate.pb.TrackPaymentResponse.response_meta:type_name -> affiliate.pb.ResponseMeta
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_affiliate_proto_init() }
func file_affiliate_proto_init() {
	if File_affiliate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_affiliate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateDetailsDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDetailsDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateMetaTopCommission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateMetaTopReferral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateRanking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateRankingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateRankingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateCoreTimedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateDetailsByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAffiliateDetailsByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralCoreStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralCoreTimedStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralTrendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralClicks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralEarnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferralRecent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralRecentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralRecentListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralDetailsByReferralIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReferralDetailsByReferralIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingDates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableSlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableSlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBookingListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackClickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRegistrationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthCookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AffiliateProfileMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOutTickets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentIntentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackCheckOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackCheckOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_affiliate_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_affiliate_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_affiliate_proto_msgTypes[70].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_affiliate_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_affiliate_proto_goTypes,
		DependencyIndexes: file_affiliate_proto_depIdxs,
		EnumInfos:         file_affiliate_proto_enumTypes,
		MessageInfos:      file_affiliate_proto_msgTypes,
	}.Build()
	File_affiliate_proto = out.File
	file_affiliate_proto_rawDesc = nil
	file_affiliate_proto_goTypes = nil
	file_affiliate_proto_depIdxs = nil
}
